<?xml version="1.0"?>
<doc>
  <assembly>
    <name>Heuristics.Library</name>
  </assembly>
  <members>
    <member name="T:Heuristics.GuiControls.AjaxGrid">
 -----------------------------------------------------------------------------
 <summary>
 A custom implementation of a data grid. The objective is to mimick the
 DataGrid control that is provided with the .NET framework, while instead
 of using the PostBack mechanism, it will use AJAX.
 </summary>
 -----------------------------------------------------------------------------
</member>
    <member name="F:Heuristics.GuiControls.AjaxGrid.m_strPager">
 -----------------------------------------------------------------------------
 <summary></summary>
 -----------------------------------------------------------------------------
</member>
    <member name="M:Heuristics.GuiControls.AjaxGrid.DataBind">
 -----------------------------------------------------------------------------
 <summary>
 Override the databind event, so we can load up the data, manipulate the
 column collection, and change any other settings we want to change.
 </summary>
 -----------------------------------------------------------------------------
</member>
    <member name="M:Heuristics.GuiControls.AjaxGrid.Render(System.Web.UI.HtmlTextWriter)">
 -----------------------------------------------------------------------------
 <summary>
 Change the way the datagrid control is rendered. In this case, we need
 to add some content around the grid, such as div tags.
 </summary>
 -----------------------------------------------------------------------------
</member>
    <member name="M:Heuristics.GuiControls.AjaxGrid.SetupPaging">
 -----------------------------------------------------------------------------
 <summary>
 Setup the object to handle the paging action
 </summary>
 -----------------------------------------------------------------------------
</member>
    <member name="M:Heuristics.GuiControls.AjaxGrid.ExportToCsv">
 -----------------------------------------------------------------------------
 <summary>
 Convert Grid to a comma seperate excel document
 </summary>
 -----------------------------------------------------------------------------
</member>
    <member name="M:Heuristics.GuiControls.AjaxGrid.ItemCreated(System.Object,System.Web.UI.WebControls.DataGridItemEventArgs)">
 -----------------------------------------------------------------------------
 <summary></summary>
 -----------------------------------------------------------------------------
</member>
    <member name="M:Heuristics.GuiControls.AjaxGrid.AjaxifyGridHeaders(System.Web.UI.WebControls.DataGridItem)">
 -----------------------------------------------------------------------------
 <summary>
 Manipulate the datagrid headers so they will call our custom
 javascript code, which initiates ajax requests to redraw the grid
 </summary>
 -----------------------------------------------------------------------------
</member>
    <member name="M:Heuristics.GuiControls.AjaxGrid.BuildSortExpression(System.Web.UI.WebControls.DataGridColumn)">
      <summary>
 Determines the "next" sort expression for a given column. 
 This will be the sort action performed when the user sorts
 this column.
 </summary>
    </member>
    <member name="M:Heuristics.GuiControls.AjaxGrid.IsLastSortedColumn(System.Web.UI.WebControls.DataGridColumn,System.String)">
      <summary>
 Determines if the column was sorted last time the grid was rendered.
 </summary>
    </member>
    <member name="M:Heuristics.GuiControls.AjaxGrid.ReverseDirection(Heuristics.GuiControls.Direction)">
      <summary>
 Returns the opposite of the given sort direction.
 </summary>
    </member>
    <member name="M:Heuristics.GuiControls.AjaxGrid.ColumnFromSortAction(System.Collections.Specialized.NameValueCollection)">
      <summary>
 Returns only the column name from an Action string
 </summary>
    </member>
    <member name="M:Heuristics.GuiControls.AjaxGrid.DirectionFromSortAction(System.Collections.Specialized.NameValueCollection)">
      <summary>
 Returns only the direction from an Action string
 </summary>
    </member>
    <member name="M:Heuristics.GuiControls.AjaxGrid.GetSortByFromAction(System.Collections.Specialized.NameValueCollection)">
      <summary>
 Returns the last sort action from an ActionData object
 </summary>
    </member>
    <member name="M:Heuristics.GuiControls.AjaxGrid.IsColumnSortable(System.Web.UI.WebControls.DataGridColumn)">
      <summary>
 Determines if a given column is sortable
 </summary>
    </member>
    <member name="M:Heuristics.GuiControls.AjaxGrid.GetPageLinks">
 -----------------------------------------------------------------------------
 <summary>
 Gets a string containing the html code for the page links.
 </summary>
 -----------------------------------------------------------------------------
</member>
    <member name="M:Heuristics.GuiControls.AjaxGrid.CreateLinkText(System.String,System.String,System.String)">
 -----------------------------------------------------------------------------
 <summary>
 Returns a link containing the given data as a string.
 </summary><param name="p_strPageNumber">The page number for the link.</param><param name="p_strLinkText">The text of the link.</param><param name="p_strCssClass">The CSS class to apply to the link.</param>
 -----------------------------------------------------------------------------
</member>
    <member name="M:Heuristics.GuiControls.AjaxGrid.CalculatePageBoundaries(System.Int32,System.Int32,System.Int32,System.Int32@,System.Int32@)">
 -----------------------------------------------------------------------------
 <summary>
 Determines the boundaries of a set given a 
 </summary>
 -----------------------------------------------------------------------------
</member>
    <member name="M:Heuristics.GuiControls.AjaxGrid.LoadData">
 -----------------------------------------------------------------------------
 <summary>
 Retrieve the data from the object which has been set as the dataobject, or
 from the DataSource property.
 </summary>
 -----------------------------------------------------------------------------
</member>
    <member name="M:Heuristics.GuiControls.AjaxGrid.GetOrderByClause">
 -----------------------------------------------------------------------------
 <summary>
 Returns a well formatted sql order by clause
 </summary>
 -----------------------------------------------------------------------------
</member>
    <member name="M:Heuristics.GuiControls.AjaxGrid.AddAllDataFieldsToCollection(System.Data.DataSet)">
 -----------------------------------------------------------------------------
 <summary>
 Add all fields in the dataset to the GridColumn collection.
 </summary>
 -----------------------------------------------------------------------------
</member>
    <member name="M:Heuristics.GuiControls.AjaxGrid.AddCustomColumnsToGrid">
 -----------------------------------------------------------------------------
 <summary>
 Add the items in the GridColumns collection to the datagrid
 </summary>
 -----------------------------------------------------------------------------
</member>
    <member name="M:Heuristics.GuiControls.AjaxGrid.GetRequiredJSCode">
 -----------------------------------------------------------------------------
 <summary></summary>
 -----------------------------------------------------------------------------
</member>
    <member name="M:Heuristics.GuiControls.AjaxGrid.GetCallingAssembly">
 -----------------------------------------------------------------------------
 <summary>
 Return the type of the class that instantiated this class.
 Since this uses the stack trace, it does not work inside event handlers
 </summary>
 -----------------------------------------------------------------------------
</member>
    <member name="M:Heuristics.GuiControls.AjaxGrid.GetControlName">
 -----------------------------------------------------------------------------
 <summary>
 Return the control name to embed in the ajaxgrid javascript calls
 </summary>
 -----------------------------------------------------------------------------
</member>
    <member name="M:Heuristics.GuiControls.AjaxGrid.NewResourceManager">
 -----------------------------------------------------------------------------
 <summary>
 Get a handle on the resource file
 </summary>
 -----------------------------------------------------------------------------
</member>
    <member name="T:Heuristics.GuiControls.GridColumn">
 -----------------------------------------------------------------------------
 <summary>
 This class acts as a data container for the meta information we need
 regarding the columns to be displayed in the grid.
 </summary>
 -----------------------------------------------------------------------------
</member>
    <member name="M:Heuristics.GuiControls.GridColumn.FormatHeaderText(System.String)">
 -----------------------------------------------------------------------------
 <summary>
 Format the header text by removing underscores, and making the first letter
 of each word in the name, uppercase. This is an attempt at providing sensible
 defaults.
 </summary>
 -----------------------------------------------------------------------------
</member>
    <member name="T:Heuristics.GuiControls.GridColumnCollection">
 -----------------------------------------------------------------------------
 <summary>
 Implements a strongly typed collection of Column objects.
 </summary>
 -----------------------------------------------------------------------------
</member>
    <member name="T:Heuristics.GuiControls.GridFilter">
 ---------------------------------------------------------------------------------
 <summary>
 This class acts as a data container for meta information regarding a filter
 that will be applied to a sql query.
 </summary>
 -----------------------------------------------------------------------------
</member>
    <member name="M:Heuristics.GuiControls.GridFilter.#ctor(System.String)">
 -----------------------------------------------------------------------------
 <summary></summary>
 -----------------------------------------------------------------------------
</member>
    <member name="T:Heuristics.GuiControls.GridFilterCollection">
 ---------------------------------------------------------------------------------
 <summary>
 A strongly typed collection of Filter objects. It also knows how to output
 itself as a sql string.
 </summary>
 -----------------------------------------------------------------------------
</member>
    <member name="M:Heuristics.GuiControls.DialogBox.Render(System.Web.UI.HtmlTextWriter)">
      <summary>
 Render - Generates the html for the given controls within
 </summary>
      <param name="Writer">
      </param>
      <remarks>
      </remarks>
    </member>
    <member name="M:Heuristics.GuiControls.HSDataGrid.DataBind">
      <summary>
 Overloading the DataBind method, so we can do some customizations.
 For example: Hiding the pager when the page count is 1.
 </summary>
    </member>
    <member name="M:Heuristics.GuiControls.HSDataGrid.DataGrid_PageChanged(System.Object,System.Web.UI.WebControls.DataGridPageChangedEventArgs)">
      <summary>
 The user clicked a page number.
 </summary>
    </member>
    <member name="M:Heuristics.GuiControls.HSDataGrid.DataGrid_Sort(System.Object,System.Web.UI.WebControls.DataGridSortCommandEventArgs)">
      <summary>
 The user clicked a column header to change the sorting
 </summary>
    </member>
    <member name="P:Heuristics.GuiControls.HSDataGrid.SortField">
      <summary>
 Persists and reads which field was last used to sort on
 </summary>
    </member>
    <member name="P:Heuristics.GuiControls.HSDataGrid.SortDirection">
      <summary>
 Persists and reads which direction the last sort operation used
 </summary>
    </member>
    <member name="P:Heuristics.GuiControls.HSDataGrid.SortExpression">
      <summary>
 Returns a sort expression string (sql format)
 </summary>
    </member>
    <member name="P:Heuristics.GuiControls.HSDataGrid.HidePagerForOnePage">
      <summary>
 Specifies that the pager will be hidden if there is only
 one page of data.
 </summary>
    </member>
    <member name="M:Heuristics.GuiControls.HSPager.CreateLinkText(System.String,System.String,System.String,System.String)">
      <summary>
 Returns a link containing the given data as a string.
 </summary>
      <param name="p_strBaseUrl">The base url for the link.</param>
      <param name="p_strPageNumber">The page number for the link.</param>
      <param name="p_strLinkText">The text of the link.</param>
      <param name="p_strCssClass">The CSS class to apply to the link.</param>
    </member>
    <member name="M:Heuristics.GuiControls.HSPager.CalculatePageLinkBoundaries(System.Int32,System.Int32,System.Int32@,System.Int32@)">
      <summary>
 Determines what range of page numbers to display.
 </summary>
    </member>
    <member name="T:Heuristics.Utility.DataAccess.Database">
      <summary>
 PURPOSE:
 * Abstract which database driver is in use. This way the driver
   and therefore database type can be changed with only two config
   changes.
 * Ease development
 * Model the interface after the underlying types.

 OVERVIEW:
 * It is a self contained class, there are no separate stored
   procedure objects or command objects.
 * It supports transactions (untested)
 * It is not tied to ASP.NET programming. All configurations are
   passed to the constructor, therefore it can be used in any .NET
   application.
 * At the top of the file, there are examples on how to use it.
   They do not cover _every_ way to execute a statement, however
   they should provide a decent overview.
 * In order to allow the creation of OUTPUT parameters (see the
   example with an output parameter), you must specify the parameter 
   type using an Enumeration specific to the database you are using.
   PwcDatabase dynamically creates a HashTable based on the Type enum 
   for the database driver type you have specified. IE. If you 
   specify SqlClient, then the m_PwcTypes hashtable will contain keys 
   like this (int, bit, char, varchar, etc....) which map to the 
   underlying data value for the SqlDbType enum. 

 Although this is completely dynamic it only works with SqlClient,
 Odbc, and OleDb. In order to support more databases, there must be 
 more additional code written to add that support. This however should 
 be fairly simple.

 EXAMPLE USAGES
 There are many other ways to use this class too, these are just a few examples.
 
 <example>
 Example (executing a stored procedure, not returning anything):
 <code>
 Dim objDb As New PwcDatabase(PutYourConnectionStringHere, PutYourDbTypeHere)
 objDb.CreateCommand("{call MyPwcAccountInfo_UpdatePassword(?,?)}", CommandType.StoredProcedure)
 objDb.AddParameter("@userID", CStr(a_userID))
 objDb.AddParameter("@password", a_password)
 objDb.ExecuteNonQuery()
 </code></example><example>
 Example (executing a sql statement returning a datatable):
 <code>
 Dim objDb As New PwcDatabase(PutYourConnectionStringHere, PutYourDbTypeHere)
 dim dt as datatable
 Dim sql as string = "select * from users"
 objDb.Execute(sql, dt))
 </code></example><example>
 Example: (executing a stored procedure with a parameter returning a dataset)
 <code>
 Dim objDb As New PwcDatabase(PutYourConnectionStringHere, PutYourDbTypeHere)
 Dim ds As New DataSet
 objDb.CreateCommand("{call stored_procedure_name(?)}", CommandType.StoredProcedure)
 objDb.AddParameter("@userID", CStr(a_userID))
 objDb.Execute(ds)
 </code></example><example>
 Example (stored proc using a return parameter):
 <code>
 Dim objDb As New PwcDatabase(PutYourConnectionStringHere, PutYourDbTypeHere)
 objDb.CreateCommand("{? = call MyPwcAccount_Insert(?,?,?,?,?,?,?)}", CommandType.StoredProcedure)
 objDb.AddParameter("@RETURN_VAL", ParameterDirection.ReturnValue, "Int", 4)
 objDb.AddParameter("@fname", a_fName)
 objDb.AddParameter("@lname", a_lName)
 objDb.AddParameter("@email", a_email)
 objDb.AddParameter("@pwd", a_password)
 objDb.AddParameter("@status", CStr(CInt(PwcUserStatus.NotConfirmed)))
 objDb.AddParameter("@confirmValue", a_confirmValue)
 objDb.AddParameter("@cookie1", a_cookie)
 objDb.AddParameter("@cookie", a_cookie)
 objDb.ExecuteNonQuery()
 Dim userId as Integer = CInt(objDb.ReadParam("@RETURN_VAL"))
 </code></example></summary>
    </member>
    <member name="M:Heuristics.Utility.DataAccess.Util.ReadConfig(System.String)">
      <summary>
 Reads an item in the config file
 </summary>
    </member>
    <member name="T:Heuristics.Utility.DateFormatter">
      <summary>
 Provides advanced formatting for dates and times.
 </summary>
    </member>
    <member name="M:Heuristics.Utility.DateFormatter.#ctor">
      <summary>
 Constructor that takes a date
 </summary>
    </member>
    <member name="M:Heuristics.Utility.DateFormatter.#ctor(System.DateTime)">
      <summary>
 Constructor that takes a date
 </summary>
    </member>
    <member name="M:Heuristics.Utility.DateFormatter.Format(System.DateTime,System.String)">
      <summary>
 Returns the input date formatted based on the input mask.

 Available Tokens:<br />
 Date:
 <ul><li>$D - Full day name</li><li>$d - Short day name</li><li>#D - Long day number</li><li>#d - Short day number</li><li>$M - Long month name</li><li>$m - Short month name</li><li>#M - Long month number</li><li>#m - Short month number</li><li>#Y - Long year number</li><li>#y - Short year number</li></ul>
 
 Time:
 <ul><li>#H - Long hour</li><li>#h - Short hour</li><li>#I - Long minute</li><li>#i - Short minute</li><li>#S - Long second</li><li>#s - Short second</li><li>#T - Long time string</li><li>#t - Short time string</li></ul>
 
 Other:
 <ul><li>## - Literal #</li><li>$$ - Literal $</li></ul></summary>
    </member>
    <member name="M:Heuristics.Utility.DateFormatter.ApplyFormat(System.DateTime,System.String)">
      <summary>
 Returns a string after applying the date mask provided. Does not accept any calculation strings.
 </summary>
    </member>
    <member name="M:Heuristics.Utility.DateFormatter.calculateNewDate(System.DateTime,System.String)">
      <summary>
 Perform the calculations specified in the calc string argument on the given date, 
 and return the new date value.
 </summary>
      <param name="p_inDate">
      </param>
      <param name="p_calcString">
      </param>
      <returns>
      </returns>
      <remarks>
      </remarks>
    </member>
    <member name="M:Heuristics.Utility.DateFormatter.extractCalculationString(System.String)">
      <summary>
 Finds and returns a calculation string that can be embedded in the format mask.
 </summary>
    </member>
    <member name="M:Heuristics.Utility.DateFormatter.removeCalculationString(System.String,System.String)">
      <summary>
 Given both an input mask (in its raw form) and the calculation string that has 
 been extracted from it, return a mask excluding all calculation markup.
 </summary>
    </member>
    <member name="M:Heuristics.Utility.DateFormatter.getPart(System.DateTime,System.String)">
      <summary>
 Accepts a datetime and a mask.
 Based on the mask, it returns the appropriate part
 of the date in the correct format
 </summary>
    </member>
    <member name="M:Heuristics.Utility.DateFormatter.pad(System.String)">
      <summary>
 Handles the padding we want to do for 2 digit numbers
 </summary>
    </member>
    <member name="T:Heuristics.Utility.HSHashTable">
      <summary>
 A very simply wrapper for the provided .NET Hashtable 
 object. It's main purpose is to simplify the act of adding and 
 updating items in the collection. Instead of you checking for the
 existence of an item prior to adding it, you can simply set it.
 If it exists, it will be updated. If not then it will be added.
 
 <example><code>
 Dim o As New HSHashTable
 o.Add("test", "value")
 o.Item("test") = "value"
 o("test") = "value"
 o("test2") = "value2"
 </code>
 
 In the above example, the first line is explicitly adding an item. The
 add method will still throw an exception if the item is already in the 
 collection. However, the second two lines will add the item if it does 
 not exist, or update it if it does. The end result in this case is the 
 HashTable has two elements:
 * test=value
 * test2=value2
 
 It also adds a new method, ToArray that will return an array
 where the odd items are the keys and the even items are the values
 from the HashTable. The type of the array depends on the Type object
 given to the method.
 </example></summary>
    </member>
    <member name="M:Heuristics.Utility.HSHashTable.ToArray(System.Type)">
      <summary>
 Converts the HashTable to an array where odd items are
 the keys and even items are the values.
 
 <example><code>
 Dim o As New HSHashTable
 o("test") = "value"
 o("test2") = "value2"
 
 Dim arr As String() = o.ToArray(GetType(String))
 Response.Write(Join(arr, "<br />"))
 </code>
 
 In the above example, the following string will be displayed in
 the browser:
 <code>
 test
 value
 test2
 value2
 </code></example></summary>
      <param name="p_objType">A Type object representing the type of array you want returned.</param>
      <returns>A one dimensional array converted to the type specified.</returns>
    </member>
    <member name="P:Heuristics.Utility.HSHashTable.Item(System.Object)">
      <summary>
 Gets or sets the value associated with the specified key. If that key
 does not exist when setting, it will add it, or return nothing.
 </summary>
    </member>
    <member name="M:Heuristics.Utility.HSCheck.IsEmpty(System.Object)">
 -----------------------------------------------------------------------------
 <summary>
 Determines if the input is nothing, empty or dbnull and returns true if so.
 </summary><param name="p_objIn">Any object can be passed into this function to determine
 if it is "empty".</param><returns>Returns true if the object is empty.</returns>
 -----------------------------------------------------------------------------
</member>
    <member name="M:Heuristics.Utility.HSCheck.IsNotEmpty(System.Object)">
 -----------------------------------------------------------------------------
 <summary>
 Returns true if the input object is not empty.
 </summary><param name="p_objIn">Any object can be passed into this function to determine
 if it is "empty".</param><returns>Returns true if the input object is not empty.</returns><seealso cref="M:Heuristics.Utility.HSCheck.IsEmpty(System.Object)" />
 -----------------------------------------------------------------------------
</member>
    <member name="M:Heuristics.Utility.HSCheck.IsNullRef(System.Object)">
 -----------------------------------------------------------------------------
 <summary>
 Returns true if the parameter is a null reference.
 </summary><param name="p_objIn">Any object to test.</param><returns>Returns true if the parameter is a null reference.</returns>
 -----------------------------------------------------------------------------
</member>
    <member name="M:Heuristics.Utility.HSCheck.IsObject(System.Object)">
 -----------------------------------------------------------------------------
 <summary>
 Returns true if the parameter is an instantiated object.
 </summary><param name="p_objIn">Any object to test.</param><returns>Returns true if the parameter is an instantiated object.</returns>
 -----------------------------------------------------------------------------
</member>
    <member name="M:Heuristics.Utility.HSData.CloneTableStructure(System.Data.DataTable)">
 -----------------------------------------------------------------------------
 <summary>
 Returns a new datatable with the same structure as the one passed in.
 </summary><param name="p_dtSrc">The intput datatable you want to use as the baseline.</param>
 -----------------------------------------------------------------------------
</member>
    <member name="M:Heuristics.Utility.HSData.CsvFromRelatedTables(System.Data.DataView,System.String,System.String[],System.Data.DataView,System.String,System.String[])">
 -----------------------------------------------------------------------------
 <summary>
 Generates a csv output for two related tables.
 </summary><param name="p_dvPrimarySrc"></param><param name="p_strPrimaryLinkField"></param><param name="p_arrPrimaryColumns">Primary Columns to include</param><param name="p_dvSecondarySrc"></param><param name="p_strSecondaryLinkField"></param><param name="p_arrSecondaryColumns">Secondary Columns to include</param><returns></returns><remarks></remarks><history>
 	[sreed]	7/4/2007	Created
 </history>
 -----------------------------------------------------------------------------
</member>
    <member name="M:Heuristics.Utility.HSData.CsvFromTable(System.Data.DataView,System.String,System.String[],System.Int32)">
 -----------------------------------------------------------------------------
 <summary>
 Outputs a dataview in comma separated values list format based on a column list and a filter.
 </summary><param name="p_dvSrc"></param><param name="p_strFilter"></param><param name="p_arrColumns">Columns to include</param><param name="p_intIndent">Indentation Level</param><returns></returns><remarks></remarks><history>
 	[sreed]	7/4/2007	Created
 </history>
 -----------------------------------------------------------------------------
</member>
    <member name="M:Heuristics.Utility.HSData.QualifyValueForCsv(System.String)">
 -----------------------------------------------------------------------------
 <summary>
 Formats the value appropriately for a csv file.
 </summary><param name="p_strInput"></param><returns></returns><remarks></remarks><history>
 	[sreed]	7/4/2007	Created
 </history>
 -----------------------------------------------------------------------------
</member>
    <member name="M:Heuristics.Utility.HSData.CsvFromTable(System.Data.DataView,System.String[])">
 -----------------------------------------------------------------------------
 <summary>
 Outputs a dataview in comma separated values list format.
 </summary><param name="p_dvSrc">A System.Data.DataView containing the data you want to 
 export to CSV format. We used a DataView so you can apply filtering and 
 sorting prior to exporting.</param><param name="p_arrToIgnore">A variable list of arguments containing the name
 of fields in the DataView to ignore, and not export.</param><returns>A string with the columns as the headers, and all the data
 in a comma separated values list.</returns><example>
 The following is the simplest usage possible. 
 <code lang="VB">&gt;
 Dim dtTest as DataTable
 'populate datatable
 Dim strOutput as String
 strOutput = Heuristics.Utility.HSData.CsvFromTable(dtTest.DefaultView)
 </code>
 
 The following will ignore the test_id and status_id columns in the DataTable.
 <code lang="VB">&gt;
 Dim dtTest as DataTable
 'populate datatable
 Dim strOutput as String
 strOutput = Heuristics.Utility.HSData.CsvFromTable(dtTest.DefaultView, "test_id", "status_id")
 </code></example>
 -----------------------------------------------------------------------------
</member>
    <member name="M:Heuristics.Utility.HSData.Merge(System.Data.DataTable[])">
 -----------------------------------------------------------------------------
 <summary>
 Returns a datatable that is a combination of all the input datatables.
 </summary><param name="p_arrDT">A variable list of datatable.</param><returns>Returns a datatable that is a combination of all the input 
 datatables.</returns>
 -----------------------------------------------------------------------------
</member>
    <member name="M:Heuristics.Utility.HSData.OrderDataSetBy(System.Data.DataSet,System.String)">
 -----------------------------------------------------------------------------
 <summary>
 Perform an inplace ordering of data in a DataSet (first table only).
 </summary><param name="p_dsIn">The DataSet to order.</param><param name="p_strOrderBy">The order clause to apply to the DataSet.
 Any standard SQL order by clause should work. </param>
 -----------------------------------------------------------------------------
</member>
    <member name="M:Heuristics.Utility.HSData.TableFromCsvFile(System.String)">
 -----------------------------------------------------------------------------
 <summary>
 Loads a CSV file into a datatable.
 </summary><param name="p_strFilePath">The fully qualified path to the csv file.</param>
 -----------------------------------------------------------------------------
</member>
    <member name="M:Heuristics.Utility.HSData.TableFromExcel(System.String)">
 -----------------------------------------------------------------------------
 <summary>
 Loads an Excel document as a datatable
 </summary><param name="p_strFilePath">Fully qualified path to the excel file.</param>
 -----------------------------------------------------------------------------
</member>
    <member name="M:Heuristics.Utility.HSData.TableFromGeneric(System.Object)">
      <summary>
 Figures out what the underlying data structure is (DataTable, DataSet, DataView)
 and converts the input to that type and returns a DataTable.
 </summary>
    </member>
    <member name="M:Heuristics.Utility.HSData.TableFromXmlStr(System.String)">
 -----------------------------------------------------------------------------
 <summary>
 Creates and returns a dataset from an XML string which contains both
 the structure and data
 </summary><param name="p_strXml">The XML string to use in creating the dataset.</param>
 -----------------------------------------------------------------------------
</member>
    <member name="M:Heuristics.Utility.HSData.XmlStrFromTable(System.Data.DataSet)">
 -----------------------------------------------------------------------------
 <summary>
 Generates an XML string representing the structure and data in a dataset
 </summary><param name="p_dsData">The dataset for which to generate the XML string.</param>
 -----------------------------------------------------------------------------
</member>
    <member name="M:Heuristics.Utility.HSFileCache.Load(System.String)">
      <summary>
 Loads the content of a file from either the file or
 from the cache
 </summary>
    </member>
    <member name="T:Heuristics.Utility.HSFileLoader">
      <summary>
 Loads the content of a file using the HSFileCache object,
 which caches the file contents in memory to reduce file IO.

 By default, it assumes there is a web.config setting named 
 "WebPrivatePath" that points to the location of the directory
 where all non-public files are stored. If that setting does not 
 exist it will assume the path is under the current execution
 path.
		
 Use the following examples to figure out how to use it. 
 For the examples assume, the following directory tree:

 <example><code>
 /approot
     ./web
         ./public_files
             ./reports
                 ./members.rpt
     ./private_files
         ./sql
             ./query.sql
         ./email_templates
             ./user_created.tmpl
         ./reports
             ./administrators.rpt
 </code>

 You can also set the "SqlPath" and "EmailTemplatePath" 
 web.config settings, which are under the "WebPrivatePath" 
 location. Assume the following settings in the web.config:

 <code><add key="WebPrivatePath" value="..\web_private\" /><add key="SqlPath" value="sql\" /><add key="EmailTemplatePath" value="email_templates\" /><add key="ReportsPath" value="reports\" /></code><code lang="VB">
 HSFileLoader.LoadSql("query.sql")
 HSFileLoader.LoadEmailTemplate("user_created.tmpl")
 HSFileLoader.Load("", "public_files\reports\members.rpt")
 HSFileLoader.Load("reports", "administrators.rpt")
 </code></example></summary>
    </member>
    <member name="M:Heuristics.Utility.HSFileLoader.Load(System.String)">
      <summary>
 The standard load method.
 </summary>
    </member>
    <member name="M:Heuristics.Utility.HSFileLoader.Load(System.String,System.String)">
      <summary>
 This load method takes an additional parameter, which is the 
 name of a config setting containing a directory that the 
 file is stored in.
 </summary>
    </member>
    <member name="M:Heuristics.Utility.HSFileLoader.LoadSql(System.String)">
      <summary>
 Reads the SqlPath setting from the web.config, and 
 loads the given sql script from that directory.
 </summary>
    </member>
    <member name="M:Heuristics.Utility.HSFileLoader.LoadEmailTemplate(System.String)">
      <summary>
 Reads the EmailTemplatePath setting from the web.config, and 
 loads the given email template from that directory.
 </summary>
    </member>
    <member name="M:Heuristics.Utility.HSFileLoader.Path(System.String)">
      <summary>
 Loads the standard path Heuristics uses for our web project 
 resources. Assumes there is a WebPrivatePath web.config setting.
     Example for p_strFile: sql\query.sql
 </summary>
    </member>
    <member name="M:Heuristics.Utility.HSList.Coalesce(System.Object[])">
 -----------------------------------------------------------------------------
 <summary>
 Returns the first parameter which is not empty. 
 This is analogous to the T-Sql function "Coalesce".
 </summary><param name="p_objList">The parameter list to test for emptiness.</param><returns>Returns the first parameter which is not empty, otherwise it returns
 nothing</returns><example><code lang="VB">&gt;
 Dim objUtil as Heuristics.Utility.General
 Dim obj1 as Object = objUtil.Coalesce(Nothing, "odd", "even", Nothing)
 Dim obj2 as Object = objUtil.Coalesce("", "odd", "even", Nothing)
 Dim obj3 as Object = objUtil.Coalesce("odd", "odd", "even", Nothing)
 Dim obj4 as Object = objUtil.Coalesce(Nothing, "", "odd", "even", Nothing)
 </code>
 The above example every object will equate to the string "odd" because "odd"
 is the first unempty element in the parameter arrays
 </example>
 -----------------------------------------------------------------------------
</member>
    <member name="M:Heuristics.Utility.HSList.HashFromArray(System.Object[])">
 -----------------------------------------------------------------------------
 <summary>
 Builds a HashTable from an array. The elements with an odd index become the 
 hashtable keys, and the elements with an even index become the values.
 So the first element in the hashtable will be composed of the first and second
 elements in the array.
 </summary><param name="p_obj">An array of "objects" which can be practicaly anything. 
 You must keep in mind that the items to be used as a key into the hashtable
 must be valid keys. This will throw an exception of there are an uneven number
 of elements in the input array.</param><returns>A hashtable containing the elements in the array.</returns><example><code lang="VB">&gt;
 Dim objUtil as Heuristics.Utility.General
 Dim arrEmails(3) as String
 arrPeople(0) = "Glen Pfeiffer"
 arrPeople(1) = "gpfeiffer@heuristics.net"
 arrPeople(2) = "Scott Reed"
 arrPeople(3) = "sreed@heuristics.net"
 
 Dim htEmails as HashTable
 htEmails = objUtil.HashFromArray(arrEmails)
 </code>
 The above example will yield a hashtable with two items. The keys will be 
 the peoples names, and the values will be the email addresses.
 </example>
 -----------------------------------------------------------------------------
</member>
    <member name="M:Heuristics.Utility.HSList.HashFromString(System.String,System.String,System.String,System.Boolean)">
 -----------------------------------------------------------------------------
 <summary>Generates a HashTable from a string that consists of name/value 
 combinations where the names are separated from the values with p_strNameValSep, 
 and the name/value pairs are separated from other pairs with p_strItemSep.
 </summary><param name="p_strIn">The string from which to generate the HashTable.</param><param name="p_strKeyValDelim">The delimiter separating the Key from the Value.</param><param name="p_strPairDelim">The delimiter separating pairs from other pairs.</param><param name="p_bolUrlEncode">Boolean value indicating whether or not to UrlEncode the Hashtable.</param>
 -----------------------------------------------------------------------------
</member>
    <member name="M:Heuristics.Utility.HSList.IsInList(System.Object,System.Object[])">
 -----------------------------------------------------------------------------
 <summary>
 Determines if the first parameter appears in the list
 of parameters following it. Accepts a variable list of
 parameters or an array. But it does not accept an array
 list or other "collection" types. At least one item is
 required for the second parameter (nothing) will raise
 an error.
 </summary><param name="p_objIn">The token to search for in the following list.</param><param name="p_arrList">A variable list of parameters to search for the
 token.</param><returns>If the argument p_objIn appears in the p_arrList array, this 
 function returns true. Otherwise it returns false.</returns>
 -----------------------------------------------------------------------------
</member>
    <member name="M:Heuristics.Utility.HSList.IsNull(System.Object,System.Object)">
 -----------------------------------------------------------------------------
 <summary>
 Returns the first parameter if it is not empty, otherwise returns
 the second parameter. This is analogous to the T-Sql function "IsNull".
 </summary><param name="p_objTest">The parameter to test for emptiness.</param><param name="p_objFalseResult">The parameter to return if the first parameter
 is empty.</param><returns>Returns the first parameter if it is not empty, otherwise returns
 the second parameter.</returns>
 -----------------------------------------------------------------------------
</member>
    <member name="M:Heuristics.Utility.HSList.NextInList(System.Object,System.Object[])">
 -----------------------------------------------------------------------------
 <summary>
 Purpose: Allows you to cycle through a list of values while providing
 the "value" and not an index into an array. You provide a "seed" value
 which the function then finds in the "list" of values. The function
 will return the next item in the list after the seed value. If the
 seed is the same as the last item in the list, it will return the
 first item. If the seed value is empty, nothing or not present in the
 list, it will return the first item in the list. It assumes that the
 first item is the default.
 
 It accepts and returns an Object type - which gives more flexibility.
 It will function on Strings, Integers, Doubles, Longs, etc.
 
 I wrote it to facilitate easy switching between two values. It's
 original name was GetAlternate and it only let you swap between two
 items. This function still allows you to swap between two items, but
 will also let you work on larger lists.
 </summary><param name="p_objSeed">Should represent the "current" value.</param><param name="p_objList">A list of values to cycle through.</param><returns>The item in the variable list of arguments that follows the
 seed value supplied.</returns><example><code lang="VB">
 Dim objUtil as Heuristics.Utility.General
 Dim strOddEven as String = "ODD"
 For i as Integer = 0 to 10
		console.writeline("i is: " + objUtil.NextInList(strLastSortDir, "ODD", "EVEN"))
 Next
 </code><p>The above example will output:</p><code>
 i is: EVEN
 i is: ODD
 i is: EVEN
 i is: ODD
 i is: EVEN
 i is: ODD
 i is: EVEN
 i is: ODD
 i is: EVEN
 i is: ODD
 i is: EVEN
 </code>
 
 That was a basic example of using it to alternate between two values, but the
 power lies in that you can cycle through any number of values.
 </example>
 -----------------------------------------------------------------------------
</member>
    <member name="M:Heuristics.Utility.HSList.Slice(System.Object,System.Int32,System.Int32)">
 -----------------------------------------------------------------------------
 <summary>
 Returns an array consisting of the low point through and
 including the high point.
 </summary><param name="p_arrIn">The array that you wish to get a slice of.</param><param name="p_intStartIndex">The first array element to be included
 in the resulting array slice.</param><param name="p_intEndIndex">The last array element to be included in 
 the resulting array slice.</param><returns>A new array containing only those items including and between
 the start and end index arguments.</returns>
 -----------------------------------------------------------------------------
</member>
    <member name="M:Heuristics.Utility.HSList.StringFromHash(System.Collections.Hashtable,System.String,System.String,System.Boolean)">
 -----------------------------------------------------------------------------
 <summary>Generates a string consisting of name/value combinations where the
 names are separated from the values with p_strNameValSep, and the name/value 
 pairs are separated from other pairs with p_strItemSep.
 </summary><param name="p_htIn">The hashtable from which to generate the string.</param><param name="p_strKeyValDelim">The delimiter to use to separate the Key from the Value.</param><param name="p_strPairDelim">The delimiter to use to separate pairs from other pairs.</param><param name="p_bolUrlDecode">Boolean value indicating whether or not to UrlDecode the Hashtable.</param>
 -----------------------------------------------------------------------------
</member>
    <member name="M:Heuristics.Utility.HSList.Unique(System.Object[])">
 -----------------------------------------------------------------------------
 <summary>Generates a string consisting of name/value combinations where the
 names are separated from the values with p_strNameValSep, and the name/value 
 pairs are separated from other pairs with p_strItemSep.
 </summary><param name="arrIn">An array containing objects that can be compared with an equal sign.</param><returns>An array containing only unique items.</returns>
 -----------------------------------------------------------------------------
</member>
    <member name="T:Heuristics.Utility.HSPath">
      <summary>
Custom extensions to the System.IO.Path class.
</summary>
    </member>
    <member name="M:Heuristics.Utility.HSPath.Combine(System.String[])">
      <summary>
 Performs the same functionality as the built in 
 IO.Path.Combine method except that it is not
 limited to two parameters.

 <example><code lang="VB">
 Dim strPath as String
 strPath = HSPath.Combine("c:", "inetpub", "wwwroot", "client_a")
 </code></example></summary>
      <param name="p_arrPaths">
 A ParamArray of String path items to be combined into one string.
 </param>
    </member>
    <member name="M:Heuristics.Utility.HSString.Chomp(System.String)">
 -----------------------------------------------------------------------------
 <summary>
 Removes all trailing newlines (crlf) from a string. 
 </summary><param name="p_strIn">A string.</param>
 -----------------------------------------------------------------------------
</member>
    <member name="M:Heuristics.Utility.HSString.Chop(System.String,System.Int32)">
 -----------------------------------------------------------------------------
 <summary>
 Removes N (default 1) character(s) from the end of the given string.
 </summary><param name="p_strIn">A string.</param><param name="p_intCount">The number of characters to remove from the 
 end of the string. Default = 1.</param>
 -----------------------------------------------------------------------------
</member>
    <member name="M:Heuristics.Utility.HSString.Chop(System.Text.StringBuilder,System.Int32)">
 -----------------------------------------------------------------------------
 <summary>
 Removes N (default 1) character(s) from the end of the given stringbuilder.
 </summary><param name="p_sbIn">A stringbuilder.</param><param name="p_intCount">The number of characters to remove from the 
 end of the string. Default = 1.</param>
 -----------------------------------------------------------------------------
</member>
    <member name="M:Heuristics.Utility.HSString.GetInitials(System.Object)">
 -----------------------------------------------------------------------------
 <summary>
 Given an input string, this function returns the first letter of each word.
 </summary><param name="p_obj">A string.</param><returns>A string containing the first letter of each word in the supplied 
 string.</returns><example><code lang="VB">&gt;
 Dim objUtil as Heuristics.Utility.General
 Dim strName as String = "Jeffery Adam Bogart"
 objUtil.GetInitials(strName)
 </code>
 The above will yeild: "JAR"
 </example>
 -----------------------------------------------------------------------------
</member>
    <member name="M:Heuristics.Utility.HSString.GetSentenceBeginnings(System.String)">
 -----------------------------------------------------------------------------
 <summary>
 Gets an array of integers referencing the location of sentence beginnings 
 within a string. Does not return the location of the first sentence, which 
 is assumed to be 0. Sentences are considered to start after a period, colon 
 and semi-colon.
 </summary><param name="p_strValue">Input string containg 0 or more sentences.</param><returns>An integer array containing the location of the beginning of each
 sentence, except for the first sentence, which is always the beginning of the
 string; I.E. 0.</returns><example><code lang="VB">&gt;
 Dim objUtil as Heuristics.Utility.General
 Dim strText as String
 strText = "Some long text. This will probably come from another function. "
 strText = strText + "This is only an example, but you get the point."
 
 Dim arrSentenceLocations as Integer()
 arrSentenceLocations = objUtil.GetSentenceBeginnings(strText)
 </code>
 The above example will populate arrSentenceLocations with two elements
 that reference the location of the second and third sentence in the string.
 </example>
 -----------------------------------------------------------------------------
</member>
    <member name="M:Heuristics.Utility.HSString.InitCaps(System.String)">
 -----------------------------------------------------------------------------
 <summary>
 Capitalize the first letter of the each word in the string
 </summary>
 -----------------------------------------------------------------------------
</member>
    <member name="M:Heuristics.Utility.HSString.MidZero(System.String,System.Int32,System.Int32)">
 -----------------------------------------------------------------------------
 <summary>
 Acts like the Mid() function, but is zero based instead of one based. There
 are times, when working with strings, that the code becomes hard to read
 because we are always removing one from the "length" value, or adding one 
 to the "index" value. This function is an attempt to remove that necessity
 to allow you to operate on strings using only zero based functions.
 </summary><param name="p_strIn">String to operate on.</param><param name="p_intStartIndex">The index location marking the beginning
 of the desired output. This is a zero based index, not a one based index
 like the built in Mid function.</param><param name="p_intLength">The length of the string to return.</param><returns>A string starting at the start index and ending at the 
 requested length.</returns>
 -----------------------------------------------------------------------------
</member>
    <member name="M:Heuristics.Utility.HSString.ReadFileContents(System.String)">
 -----------------------------------------------------------------------------
 <summary>
 Returns the content of a file as a string.
 </summary><param name="p_strFile">Fully qualified path to the file.</param>
 -----------------------------------------------------------------------------
</member>
    <member name="M:Heuristics.Utility.HSString.StripNonAlpha(System.String)">
 -----------------------------------------------------------------------------
 <summary>
 Returns a string containing only Alphabetical characters.
 </summary><param name="p_strIn">String to operate on.</param>
 -----------------------------------------------------------------------------
</member>
    <member name="M:Heuristics.Utility.HSString.StripNonAlphaNumeric(System.String)">
 -----------------------------------------------------------------------------
 <summary>
 Returns a string containing only AlphaNumerical characters.
 </summary><param name="p_strIn">String to operate on.</param>
 -----------------------------------------------------------------------------
</member>
    <member name="M:Heuristics.Utility.HSString.StripTags(System.String,System.String)">
 -----------------------------------------------------------------------------
 <summary>
 A crude method for stripping html, but it is functional. It removes ALL
 groups of less than and greater than signs, even if there is no end tag.
 </summary>
 -----------------------------------------------------------------------------
</member>
    <member name="M:Heuristics.Utility.HSString.Squeeze(System.String,System.String)">
 -----------------------------------------------------------------------------
 <summary>
 Removes duplicate characters from the input string. Uses the parameter 
 p_strRemove to know what characters to remove.
 </summary>
 		''' 
 <param name="p_strIn">The input string to operate on.</param><param name="p_strRemove">The character(s) to remove from the input
 string.</param><returns>A string without duplicate occurrances of the string to 
 remove.</returns>
 -----------------------------------------------------------------------------
</member>
    <member name="M:Heuristics.Utility.HSString.WordSafeSubstring(System.String,System.Int32,System.Int32)">
 -----------------------------------------------------------------------------
 <summary>
 Returns a portion of a string starting at the word closest to the start point.
 </summary><param name="p_strValue">The string to operate on.</param><param name="p_intStartIndex">The location in the string to start. This
 is a "soft" value, meaning that if the location provided is the middle of a 
 word, it will move backwards to find the beginning of the word.</param><param name="p_intLength">The length of the resulting string. This is also a
 soft value because we cannot guarantee that there will be a combination of 
 words at the location specified that will meet the length requirement.
 Currently it does not care if the returning string is a little too long.
 </param><returns>A string representing a portion of the input string. It will never
 break a word. This has been useful when needing to get portions of abstracts
 to display to the user.</returns><example><code lang="VB">&gt;
 Dim objUtil as Heuristics.Utility.General
 Dim strTest as String = "This is my contrived example."
 objUtil.WordSafeSubstring(strTest, 5, 200) 'yeilds: "is my contrived example."
 objUtil.WordSafeSubstring(strTest, 5, 13) 'yeilds: "is my"
 </code></example>
 -----------------------------------------------------------------------------
</member>
    <member name="M:Heuristics.Utility.HSString.XmlEncode(System.String)">
 -----------------------------------------------------------------------------
 <summary>
 Returns a string that is encoded for xml usage.
 </summary><param name="p_strIn">The string which you want to encode XML 
 characters.</param><returns>A string with all XML characters encoded to their standard
 equivalent.</returns>
 -----------------------------------------------------------------------------
</member>
    <member name="M:Heuristics.Utility.HSWeb.BuildSelectControl(System.Web.UI.WebControls.ListControl,System.Data.DataTable,System.String,System.String,System.String,System.String,System.String,System.String,System.Boolean,System.String,System.String)">
 -----------------------------------------------------------------------------
 <summary>
 Populates a drop down list with data from a datatable.
 </summary><param name="p_objDdl">The ASP.NET ListControl.</param><param name="p_dtData">A System.Data.DataTable containing 
 the data to add to the list.</param><param name="p_strDisplayField">The name of the field in the DataTable to use 
 for display in the list.</param><param name="p_strValueField">The name of the field in the DataTable to use 
 for the list value.</param><param name="p_strSelectedValue">The value that should be used to find the 
 item in the list to mark as selected.</param><param name="p_strSelectedText">The display text that should be used to find the
 item in the list to mark as selected. </param><param name="p_strSortField">The field in the DataTable to sor by.</param><param name="p_strSortDirection">The direction to sort the list.</param><param name="p_bolBlankItemAtTop">Boolean flag to turn on/off a blank item 
 at the top of the list. True will display a blank item, and false will not.
 </param><param name="p_strFirstItemText">The text for the optional first item in the list.</param><param name="p_strFirstItemValue">The value for the optional first item in the list.</param><example><code lang="VB">&gt;
 </code></example>
 -----------------------------------------------------------------------------
</member>
    <member name="M:Heuristics.Utility.HSWeb.CopyDataGridRow(System.Web.UI.WebControls.DataGridItem,System.Int32)">
 -----------------------------------------------------------------------------
<summary>
 Makes a copy of a row from a datagrid.
</summary><param name="dgi">A datagrid item/row to copy.</param><param name="insertat">The ordinal index where the new datagrid
item will be inserted at. This function needs to know about this
because a datagriditem stores its location in the datagrid.</param><returns>A new datagriditem which is a copy of the datagriditem
in the first parameter</returns>
 -----------------------------------------------------------------------------
</member>
    <member name="M:Heuristics.Utility.HSWeb.GetCookies">
 -----------------------------------------------------------------------------
 <summary>
 Get all the cookies the the client currently has stored.
 </summary><returns>Returns a string containing all the cookies names and values.
 </returns>
 -----------------------------------------------------------------------------
</member>
    <member name="M:Heuristics.Utility.HSWeb.HashFromSession(System.String)">
 -----------------------------------------------------------------------------
 <summary>
 Loads a HashTable from a session variable. It returns a HSHashTable object
 which is much more flexible than a regular HashTable.
 </summary>
 -----------------------------------------------------------------------------
</member>
    <member name="M:Heuristics.Utility.HSWeb.ReadConfig(System.String)">
 -----------------------------------------------------------------------------
 <summary>
 Read a configuration setting from the web config file.
 </summary><param name="p_strKey">The key to lookup in the confg file.</param><returns>The value associated with the key in the config file.</returns>
 -----------------------------------------------------------------------------
</member>
    <member name="M:Heuristics.Utility.HSWeb.ReadRequest(System.String,System.TypeCode,System.Object)">
      <summary>
Encapsulates the typical logic used when reading a value 
from the Request object.
 - If the value is empty, return p_objNullVal
 - Attempt to convert to the given type and return the
   value.
 - If conversion fails, return p_objNullVal
</summary>
    </member>
    <member name="M:Heuristics.Utility.HSWeb.RegisterClientStartupFunction(System.Object,System.String)">
 -----------------------------------------------------------------------------
 <summary>
 Allows ASP.NET server controls to emit client-side script blocks in the 
 System.Web.UI.Page.
 </summary><example>
 This example shows how to define an anonymous function inline that will be
 executed once the page is finished loading.
 <code lang="VB">
 	RegisterClientStartupFunction(Me, "function() {alert(window.location)}")
 </code>
 
 Believe it or not, the following example actually works the way you would hope it would.
 Even though each function uses the same name, they are held in different memory locations.
 Therefore when called, the correct function is executed.
 <code lang="VB">
 	Dim strJsFunc As String
 
 	strJsFunc = "function test() {alert('test_one')}"
 	RegisterClientStartupFunction(Me, strJsFunc)
 
 	strJsFunc = "function test() {alert('test_two')}"
 	RegisterClientStartupFunction(Me, strJsFunc)
 
 	strJsFunc = "function test() {alert('test_three')}"
 	RegisterClientStartupFunction(Me, strJsFunc)
 </code>
 
 This example shows how to call a JS function that is already defined 
 either in the page or an already referenced JS file.
 <code lang="VB">
 	RegisterClientStartupFunction(Me, "test_one")
 	RegisterClientStartupFunction(Me, "test_two")
 	RegisterClientStartupFunction(Me, "test_three")
 	RegisterClientStartupFunction(Me, "test_four")
 </code>
 
 ... and the associated ASPX
 <code escaped="true" lang="ASPX"><script type="text/javascript">
 		function test_one() {
 			alert('test_one');
 		}
 	</script><script type="text/javascript">
 		function test_two() {
 			alert('test_two');
 		}
 	</script><script type="text/javascript">
 		function test_three() {
 			alert('test_three');
 		}
 	</script><script type="text/javascript">
 		function test_four() {
 			alert('test_four');
 		}
 	</script></code></example><param name="p_objContainer">A reference to the object calling this
 function. Generally it will be "me", and will be either a Page, Control
 or a UserControl object.</param><param name="p_strScript">The JavaScript code to execute once the page
 is rendered (the body onload event). This must be a JavaScript function,
 and not just a line of code.</param>
 
 -----------------------------------------------------------------------------
</member>
    <member name="M:Heuristics.Utility.HSWeb.RegisterClientStartupScript(System.Object,System.String)">
 -----------------------------------------------------------------------------
 <summary>
 Allows ASP.NET server controls to emit client-side script blocks in the 
 System.Web.UI.Page.
 </summary><example>
 This example shows how to define an anonymous function inline that will be
 executed once the page is finished loading.
 <code lang="VB">
 	RegisterClientStartupScript(Me, "alert(window.location)")
 </code></example><param name="p_objContainer">A reference to the object calling this
 function. Generally it will be "me", and will be either a Page, Control
 or a UserControl object.</param><param name="p_strScript">The JavaScript code to execute once the page
 is rendered (the body onload event).</param>
 -----------------------------------------------------------------------------
</member>
    <member name="M:Heuristics.Utility.HSWeb.RegisterClientScriptBlock(System.Object,System.String,System.String)">
 -----------------------------------------------------------------------------
 <summary>
 Allows ASP.NET server controls to emit client-side script blocks in the 
 System.Web.UI.Page.
 </summary><example><code lang="VB">
 	RegisterClientScriptBlock(Me, "alert(window.location); window.location.href = 'www.google.com';")
 </code></example><param name="p_objContainer">A reference to the object calling this
 function. Generally it will be "me", and will be either a Page, Control
 or a UserControl object.</param><param name="p_strScriptKey">A unique identifier which will prevent 
 duplicate copies of the JS code from being included in the HTML.</param><param name="p_strScript">The JavaScript code to output in the rendered 
 HTML page.</param>
 -----------------------------------------------------------------------------
</member>
    <member name="M:Heuristics.Utility.HSWeb.RegisterClientScriptInclude(System.Object,System.String,System.String)">
 -----------------------------------------------------------------------------
 <summary>
 Allows ASP.NET server controls to emit client-side script blocks in the 
 System.Web.UI.Page.
 </summary><example><code lang="VB">
 	RegisterClientScriptInclude(Me, "utility.js", "/js/utility.js")
 </code></example><param name="p_objContainer">A reference to the object calling this
 function. Generally it will be "me", and will be either a Page, Control
 or a UserControl object.</param><param name="p_strScriptKey">A unique identifier which will prevent 
 duplicate copies of the JS code from being included in the HTML.</param><param name="p_strScriptFile"></param>
 -----------------------------------------------------------------------------
</member>
    <member name="M:Heuristics.Utility.HSWeb.RegisterClientScriptHelper(System.Object,System.String,System.String)">
 -----------------------------------------------------------------------------
 <summary>
 Allows ASP.NET server controls to emit client-side script blocks in the 
 System.Web.UI.Page.
 </summary><param name="p_objContainer">A reference to the object calling this
 function. Generally it will be "me", and will be either a Page, Control
 or a UserControl object.</param><param name="p_strScriptKey">A unique identifier which will prevent 
 duplicate copies of the JS code from being included in the HTML.</param><param name="p_strScript"></param>
 -----------------------------------------------------------------------------
</member>
    <member name="M:Heuristics.Utility.HSWeb.SaveHashToSession(System.String,System.Collections.Hashtable)">
 -----------------------------------------------------------------------------
 <summary>
 Saves a HashTable to the session object, with the given key.
 </summary>
 -----------------------------------------------------------------------------
</member>
    <member name="M:Heuristics.Utility.HSWeb.SendEmail(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
 -----------------------------------------------------------------------------
 <summary>
 Send an email to one or more recipients. This function honors the config 
 item "EmailOverride". So in your application you can choose to redirect all
 email to a specific address.
 </summary><param name="p_strTo">Email address(es) to receive the email.</param><param name="p_strSubject">The subject line of the email.</param><param name="p_strBody">The body of the email text.</param><param name="p_strFrom">Who the email is originating from. (Optional)</param><param name="p_strCC">Email address(es) to receive a carbon copy (cc). 
 (Optional)</param><param name="p_strBCC">Email address(es) to receive a blind carbon copy 
 (bcc). (Optional)</param><param name="p_strAttachFileName">The full path to a file to attach to the
 email. (Optional)</param><param name="p_strSmtpServer">The SMTP server to use for sending the 
 email. (Optional)</param>
 -----------------------------------------------------------------------------
</member>
    <member name="M:Heuristics.Utility.HSWeb.StreamToBrowser(System.String,System.String,System.String)">
 -----------------------------------------------------------------------------
 <summary>
 Download content to the web browser. Enables you to force a file save as
 dialog as well.
 </summary>
 -----------------------------------------------------------------------------
</member>
    <member name="T:Heuristics.Utility.HSXml">
 -----------------------------------------------------------------------------
 Project	 : HSXml
 Class	 : Utility.HSXml
 
 -----------------------------------------------------------------------------
 <summary></summary><remarks></remarks><history>
 	[sreed]	11/9/2005	Created
 </history>
 -----------------------------------------------------------------------------
</member>
    <member name="M:Heuristics.Utility.HSXml.HTMLTransform(System.Xml.XmlNode,System.String)">
 -----------------------------------------------------------------------------
 <summary>
 Transforms a given XML Document and XSLT document into an HTML document  
 </summary><param name="p_objXmlNode"></param><param name="p_strXsltFile"></param><returns></returns><remarks></remarks><history>
 	[sreed]	11/9/2005	Created
 </history>
 -----------------------------------------------------------------------------
</member>
    <member name="M:Heuristics.Utility.HSXml.Load(System.String)">
 -----------------------------------------------------------------------------
 <summary>
 Converts an Xml string into an XmlDocument.  Must have a single top level node
 </summary><param name="p_strXml">Well formatted Xml string</param><returns></returns><remarks></remarks><history>
 	[sreed]	11/9/2005	Created
 </history>
 -----------------------------------------------------------------------------
</member>
    <member name="M:Heuristics.Utility.HSXml.Load(System.Data.DataTable,System.String)">
 -----------------------------------------------------------------------------
 <summary>
 Converts an DataTable into an XmlDocument
 </summary><param name="p_dtXml">Data table to convert</param><param name="p_strName">Table Name</param><returns></returns><remarks></remarks><history>
 	[sreed]	11/9/2005	Created
 </history>
 -----------------------------------------------------------------------------
</member>
    <member name="M:Heuristics.Utility.ISmtpMail.Send">
 -----------------------------------------------------------------------------
 <summary>
 Sends the email using the properties you have set.
 </summary>
 -----------------------------------------------------------------------------
 
</member>
    <member name="M:Heuristics.Utility.ISmtpMail.AddFileAttachment(System.String)">
 -----------------------------------------------------------------------------
 <summary>
 Add an attachment to the email. This method can be called as many times
 as you need.
 </summary>
 -----------------------------------------------------------------------------
 
</member>
    <member name="M:Heuristics.Utility.ISmtpMail.AreRequiredPropertiesSet(System.String@)">
 -----------------------------------------------------------------------------
 <summary>
 Throws an exception if not all required fields are set.
 </summary>
 -----------------------------------------------------------------------------
 
</member>
    <member name="P:Heuristics.Utility.ISmtpMail.Password">
 -----------------------------------------------------------------------------
 <summary>
 The password to use when Authentication is required.
 </summary>
 -----------------------------------------------------------------------------
 
</member>
    <member name="P:Heuristics.Utility.ISmtpMail.UserName">
 -----------------------------------------------------------------------------
 <summary>
 The username to use when Authentication is required.
 </summary><value></value>
 -----------------------------------------------------------------------------
 
</member>
    <member name="P:Heuristics.Utility.ISmtpMail.ServerPort">
 -----------------------------------------------------------------------------
 <summary>
 The server port number to use when the default is not appropriate.
 </summary><value></value>
 -----------------------------------------------------------------------------
 
</member>
    <member name="P:Heuristics.Utility.ISmtpMail.SmtpServer">
 -----------------------------------------------------------------------------
 <summary>
 The name/ip of the smtp server.
 </summary><value></value>
 -----------------------------------------------------------------------------
 
</member>
    <member name="P:Heuristics.Utility.ISmtpMail.From">
 -----------------------------------------------------------------------------
 <summary>
 The from email address.
 </summary><value></value>
 -----------------------------------------------------------------------------
 
</member>
    <member name="P:Heuristics.Utility.ISmtpMail.To">
 -----------------------------------------------------------------------------
 <summary>
 The to email addresses.
 </summary><value></value>
 -----------------------------------------------------------------------------
 
</member>
    <member name="P:Heuristics.Utility.ISmtpMail.CC">
 -----------------------------------------------------------------------------
 <summary>
 The cc email addresses.
 </summary><value></value>
 -----------------------------------------------------------------------------
 
</member>
    <member name="P:Heuristics.Utility.ISmtpMail.BCC">
 -----------------------------------------------------------------------------
 <summary>
 The bcc email addresses.
 </summary><value></value>
 -----------------------------------------------------------------------------
 
</member>
    <member name="P:Heuristics.Utility.ISmtpMail.Subject">
 -----------------------------------------------------------------------------
 <summary>
 The email subject.
 </summary><value></value>
 -----------------------------------------------------------------------------
 
</member>
    <member name="P:Heuristics.Utility.ISmtpMail.Body">
 -----------------------------------------------------------------------------
 <summary>
 The email body.
 </summary><value></value>
 -----------------------------------------------------------------------------
 
</member>
    <member name="P:Heuristics.Utility.ISmtpMail.BodyFormatAsHtml">
 -----------------------------------------------------------------------------
 <summary>
 The format of the body.
 </summary><value></value>
 -----------------------------------------------------------------------------
 
</member>
    <member name="T:Heuristics.Utility.MailPlus">
 -----------------------------------------------------------------------------
 <summary>
 Provides custom wrappers and extensions to various email objects, including
 System.Web.Mail provided with the dot Net framework.

 Test Info
 uid: hs-smtp
 pwd: sMtpR33ly
 server: smtp1.dnsmadeeasy.com
 </summary>
 -----------------------------------------------------------------------------
</member>
    <member name="M:Heuristics.Utility.MailPlus.#ctor(System.String,Heuristics.Utility.MailPlus.ConfigSettings,System.Collections.Specialized.NameValueCollection)">
 -----------------------------------------------------------------------------
 <summary>
 Constructor takes no arguments.
 </summary>
 -----------------------------------------------------------------------------
</member>
    <member name="M:Heuristics.Utility.MailPlus.Send">
 -----------------------------------------------------------------------------
 <summary>
 Sends the email using the properties you have set.
 </summary>
 -----------------------------------------------------------------------------
</member>
    <member name="M:Heuristics.Utility.MailPlus.AddFileAttachment(System.String)">
 -----------------------------------------------------------------------------
 <summary>
 Add an attachment to the email. This method can be called as many times
 as you need.
 </summary>
 -----------------------------------------------------------------------------
</member>
    <member name="M:Heuristics.Utility.MailPlus.AreRequiredPropertiesSet(System.String@)">
 -----------------------------------------------------------------------------
 <summary>
 Throws an exception if not all required fields are set.
 </summary>
 -----------------------------------------------------------------------------
</member>
    <member name="P:Heuristics.Utility.MailPlus.Password">
 -----------------------------------------------------------------------------
 <summary>
 The password to use when Authentication is required.
 </summary>
 -----------------------------------------------------------------------------
</member>
    <member name="P:Heuristics.Utility.MailPlus.UserName">
 -----------------------------------------------------------------------------
 <summary>
 The username to use when Authentication is required.
 </summary><value></value>
 -----------------------------------------------------------------------------
</member>
    <member name="P:Heuristics.Utility.MailPlus.ServerPort">
 -----------------------------------------------------------------------------
 <summary>
 The server port number to use when the default is not appropriate.
 </summary><value></value>
 -----------------------------------------------------------------------------
</member>
    <member name="P:Heuristics.Utility.MailPlus.SmtpServer">
 -----------------------------------------------------------------------------
 <summary>
 The name/ip of the smtp server.
 </summary><value></value>
 -----------------------------------------------------------------------------
</member>
    <member name="P:Heuristics.Utility.MailPlus.From">
 -----------------------------------------------------------------------------
 <summary>
 The from email address.
 </summary><value></value>
 -----------------------------------------------------------------------------
</member>
    <member name="P:Heuristics.Utility.MailPlus.To">
 -----------------------------------------------------------------------------
 <summary>
 The to email addresses.
 </summary><value></value>
 -----------------------------------------------------------------------------
</member>
    <member name="P:Heuristics.Utility.MailPlus.CC">
 -----------------------------------------------------------------------------
 <summary>
 The cc email addresses.
 </summary><value></value>
 -----------------------------------------------------------------------------
</member>
    <member name="P:Heuristics.Utility.MailPlus.BCC">
 -----------------------------------------------------------------------------
 <summary>
 The bcc email addresses.
 </summary><value></value>
 -----------------------------------------------------------------------------
</member>
    <member name="P:Heuristics.Utility.MailPlus.Subject">
 -----------------------------------------------------------------------------
 <summary>
 The email subject.
 </summary><value></value>
 -----------------------------------------------------------------------------
</member>
    <member name="P:Heuristics.Utility.MailPlus.Body">
 -----------------------------------------------------------------------------
 <summary>
 The email body.
 </summary><value></value>
 -----------------------------------------------------------------------------
</member>
    <member name="P:Heuristics.Utility.MailPlus.BodyFormatAsHtml">
 -----------------------------------------------------------------------------
 <summary>
 The format of the body.
 </summary><value></value>
 -----------------------------------------------------------------------------
</member>
    <member name="T:Heuristics.Utility.MasterPages.MasterPage">
      <summary>
 Provides a rather simplistic implementation of master pages in .NET 1.1
 You cannot have code associated with your master page. Instead you should view
 your master page as a template. You can embed controls in the template, and
 they will be correctly loaded and their code will be executed.
 
 Code influenced heavily by the following article:
 http://www.15seconds.com/issue/050714.htm
 </summary>
    </member>
    <member name="M:Heuristics.Utility.MasterPages.MasterPage.OnInit(System.EventArgs)">
      <summary>
 Handles the meat of the work. It basically loads the content
 that you want to appear in the page into memory, clears out
 the page's controls, adds the content from the template, and then
 puts your content into the placeholder in the template.
 </summary>
    </member>
    <member name="M:Heuristics.Utility.MasterPages.MasterPage.GetContentBlocks">
      <summary>
 copy all the page controls into a hashtable, where
 the key is the name of the placeholder in the template
 and the value is an array of controls
 </summary>
    </member>
    <member name="M:Heuristics.Utility.MasterPages.MasterPage.InsertContentBlocks(System.Collections.Hashtable)">
      <summary>
 Loop through the content blocks specified in the page,
 and find the associated placeholder in the template.
 Then add the controls from the content block to the
 placeholder's control collection. Throws 
 MissingContentPlaceholder exception if the associated
 placeholder is not present in the template.
 </summary>
    </member>
    <member name="M:Heuristics.Utility.MasterPages.MasterPage.GetTemplateContent(System.String)">
      <summary>
 Returns the content of the template as a string. 
 First it looks in the cache, and if not found there
 it loads it from disk.
 </summary>
    </member>
    <member name="M:Heuristics.Utility.MasterPages.MasterPage.AddCustomTitle(System.String,System.String)">
      <summary>
 Modifies the template string, by replacing the title tag with 
 the one defined in the page.
 </summary>
    </member>
    <member name="M:Heuristics.Utility.MasterPages.MasterPage.GetPageTitle">
      <summary>
 Finds and returns the page title from the page. It should be
 in a label with an id of "page_title".
 </summary>
    </member>
    <member name="P:Heuristics.Utility.MasterPages.MasterPage.Template">
      <summary>
 Allows other objects to set the template file to be used.
 This is a fully qualified path to a file.
 </summary>
    </member>
    <member name="T:Heuristics.Utility.QueryString">
      <summary>
 Provides functionality for building querystrings. The .NET Request
 object only provides a QueryString property which is of type
 Specialized.NameValueCollection. In itself it does not provide
 any much needed functionality for building querystrings. The main
 purpose of this class is to provide a simple interface to the
 underlying collection (actually, we are using the HSHashTable
 instead of the Specialized.NameValueCollection because it is
 even easier to work with) and expose a method for generating
 the actual string to be used in the querystring.
 
 <example><code>
 Dim objQS As New QueryString
 objQS("test") = "value"
 objQS("test2") = "value2"
 
 Response.Write(objQS)
 </code>
 
 The above example will output:
   test=value&amp;test2=value2
 </example></summary>
    </member>
    <member name="M:Heuristics.Utility.QueryString.#ctor">
      <summary>
 Generic constructor creates a new isntance of this class.
 </summary>
    </member>
    <member name="M:Heuristics.Utility.QueryString.#ctor(System.Boolean)">
      <summary>
 Creates a new instance of this class and populates it with
 all the items from the current Request.QueryString collection,
 if the boolean argument is true.
 </summary>
    </member>
    <member name="M:Heuristics.Utility.QueryString.#ctor(System.Collections.Specialized.NameValueCollection)">
      <summary>
 Creates a new instance of this class and populates it with
 all the items from the specified NameValueCollection.
 </summary>
      <param name="p_objQueryString">
      </param>
    </member>
    <member name="M:Heuristics.Utility.QueryString.ToString">
      <summary>
 Generates a well formed querystring based on the collection
 of data. Overrides the base ToString method. 
 </summary>
    </member>
    <member name="M:Heuristics.Utility.QueryString.LoadFromCollection(System.Collections.Specialized.NameValueCollection)">
      <summary>
 Populates the internal collection from a specified NameValueCollection.
 </summary>
      <param name="p_objQueryString">
      </param>
    </member>
    <member name="P:Heuristics.Utility.SqlFullText.SearchData.TableName">
      <summary>
 The name of the table containing the field you wish to search against.
 </summary>
    </member>
    <member name="P:Heuristics.Utility.SqlFullText.SearchData.TableAlias">
      <summary>
 The alias of the table in your query.
 </summary>
    </member>
    <member name="P:Heuristics.Utility.SqlFullText.SearchData.TablePKField">
      <summary>
 The name of the primary key field in your table.
 </summary>
    </member>
    <member name="P:Heuristics.Utility.SqlFullText.SearchData.SearchField">
      <summary>
 The name of the field you are searching in.
 </summary>
    </member>
    <member name="P:Heuristics.Utility.SqlFullText.SearchData.Terms">
      <summary>
 The search terms.
 </summary>
    </member>
    <member name="T:Heuristics.Utility.Validator">
      <summary>
 Provides many data validation helper functions.
 </summary>
    </member>
    <member name="M:Heuristics.Utility.Validator.IsAlpha(System.String)">
      <summary>
 Returns true if the input is comprised of only alphabetical chars
 </summary>
    </member>
    <member name="M:Heuristics.Utility.Validator.IsAlphaNumeric(System.String)">
      <summary>
 Returns true if the input is comprised of only alphabetical and numerical chars
 </summary>
    </member>
    <member name="M:Heuristics.Utility.Validator.IsValidDate(System.String)">
      <summary>
 Checks to see if a string matches these criteria:
 
 1) Is in the format mm/dd/yyyy, accepting one- or two-digit months, 
    one- or two-digit days, and two- or four-digit years.
 2) Valid delimiters are:  "/", "\", "-"
 3) Represents a valid date. (e.g. 2/31/2009 is rejected)
 
 This is the accepted replacement for the obsolete IsCorrectDateFormat(). However, note that
 IsCorrectDateFormat() only allowed forward slashes, but this method allows multiple delimiters.
 </summary>
    </member>
    <member name="M:Heuristics.Utility.Validator.IsEmail(System.String)">
      <summary>
 Returns true if the input string is an email
 </summary>
    </member>
    <member name="M:Heuristics.Utility.Validator.IsMoney(System.String)">
      <summary>
 Returns true if the input string is a valid money string.
 </summary>
    </member>
    <member name="M:Heuristics.Utility.Validator.IsNumeric(System.String)">
      <summary>
 Returns true if the given string is comprised of only numerical chars.

 WARNING: This should be called IsInteger; it does not accept decimal points
 or formatting characters like a comma
 </summary>
    </member>
    <member name="M:Heuristics.Utility.Validator.IsDecimal(System.String)">
      <summary>
 Returns true if the given string is comprised of only numerical chars, plus an optional decimal point
 </summary>
    </member>
    <member name="M:Heuristics.Utility.Validator.IsPhoneNumber(System.String)">
      <summary>
 Returns true if the input string is a phone number
 </summary>
    </member>
    <member name="M:Heuristics.Utility.Validator.IsSmallerThan(System.String,System.Int32)">
      <summary>
 Returns true if the given string is smaller than the given length.
 </summary>
    </member>
    <member name="M:Heuristics.Utility.Validator.IsSSN(System.String)">
      <summary>
 Returns true if the input string is a valid SSN
 </summary>
    </member>
    <member name="M:Heuristics.Utility.Validator.IsSqlDate(System.String)">
      <summary>
 Returns true if the given string is a valid date in a MS Sql
 Date field.
 </summary>
    </member>
    <member name="M:Heuristics.Utility.Validator.IsSqlDate(System.DateTime)">
      <summary>
 Returns true if the given string is a valid date in a MS Sql
 Date field.
 </summary>
    </member>
    <member name="M:Heuristics.Utility.Validator.IsSqlSmallDate(System.String)">
      <summary>
 Returns true if the given string is a valid date in a MS Sql
 SmallDate field.
 </summary>
    </member>
    <member name="M:Heuristics.Utility.Validator.IsZipCode(System.String)">
      <summary>
 Returns true if the given string is a valid US ZipCode.
 </summary>
    </member>
    <member name="M:Heuristics.Utility.Validator.BrokenIsDate(System.String)">
 -----------------------------------------------------------------------------
 <summary>
 Determines if an input string is in a valid date format. This is the exact code
 that used to exist as HSCHeck.IsDate().
 
 THIS IS BROKEN: It accepts empty strings and invalid dates, such as "2/31/2010".
 If you don't need to treat empty strings as valid dates, use IsValidDate() instead.
 </summary><param name="p_strDate">A string containing a date.</param><returns>Returns true if the input string is a valid date. It also returns
 true if the input is empty.</returns>
 -----------------------------------------------------------------------------
</member>
    <member name="M:Heuristics.Utility.Validator.ValidateDecimalPlaces(System.Object,System.Int32)">
 -----------------------------------------------------------------------------
 <summary>
 Returns TRUE if the specified object has less than or equal to the number of 
 specified decimal places. Ignores trailing zeroes.
 
 Used when dealing with decimal values stored in a T-SQL decimal(x,y) field and
 we need to validate that the scale of the entered value won't overflow the field.
 </summary>
 -----------------------------------------------------------------------------
</member>
    <member name="M:Heuristics.Utility.IWebErrors.HandleError(System.Exception,System.Collections.Generic.List{System.Text.RegularExpressions.Regex})">
 -----------------------------------------------------------------------------
 <summary>
 Gets the error message and dispatches it to the specified channel.
 </summary>
 -----------------------------------------------------------------------------
</member>
    <member name="M:Heuristics.Utility.IWebErrors.GetLastError(System.Exception)">
 -----------------------------------------------------------------------------
 <summary>
 Gets the last server error, and formats as much data as possible as an
 html string. This can then either be displayed or emailed, or whatever you 
 want.
 </summary>
 -----------------------------------------------------------------------------
</member>
    <member name="T:Heuristics.Utility.WebErrors">
 -----------------------------------------------------------------------------
 <summary>
 Gathers information from the last server error, the request object and the
 server object. Packages all the information into an html output, and 
 performs actions with it based on the configuration settings.
 </summary>
 -----------------------------------------------------------------------------
</member>
    <member name="M:Heuristics.Utility.WebErrors.#ctor(System.Collections.Specialized.NameValueCollection)">
 -----------------------------------------------------------------------------
 <summary>
 Default constructor with no parameters.
 </summary>
 -----------------------------------------------------------------------------
</member>
    <member name="M:Heuristics.Utility.WebErrors.HandleError(System.Exception,System.Collections.Generic.List{System.Text.RegularExpressions.Regex})">
 -----------------------------------------------------------------------------
 <summary>
 Gets the error message and dispatches it to the specified channel.
 </summary>
 -----------------------------------------------------------------------------
</member>
    <member name="M:Heuristics.Utility.WebErrors.sendError(System.String)">
 -----------------------------------------------------------------------------
 <summary>
 Sends the error email
 </summary><param name="message"></param>
 -----------------------------------------------------------------------------
</member>
    <member name="M:Heuristics.Utility.WebErrors.CanIncludeFieldInReport(System.String)">
      <summary>
 Checks to see if the field name matches a regex inside the collection.
 
 If it does not match, we can include it in the report.
 If it does match, we'll skip adding it.
 
 This performs a CASE INSENSITIVE check. We assume that if you want to exclude "Password", you probably
 also want to exclude "password".
 
 See Case: FB 22262
 </summary>
    </member>
    <member name="M:Heuristics.Utility.WebErrors.GetLastError(System.Exception)">
 -----------------------------------------------------------------------------
 <summary>
 Gets the last server error, and formats as much data as possible as an
 html string. This can then either be displayed or emailed, or whatever you 
 want.
 </summary>
 -----------------------------------------------------------------------------
</member>
    <member name="M:Heuristics.Utility.WebErrors.ErrorSection(System.String)">
 -----------------------------------------------------------------------------
 <summary>
 Used within GetLastError. It is only to reduce the visual complexity of the 
 above function. It builds a section header using the input string.
 </summary><param name="p_strIn"></param>
 -----------------------------------------------------------------------------
</member>
    <member name="M:Heuristics.Utility.WebErrors.ErrorItem(System.String,System.String,System.Boolean)">
 -----------------------------------------------------------------------------
 <summary>
 Builds an error item using the left hand and right hand value as parameters.
 </summary><param name="p_strLabel"></param><param name="p_strValue"></param><param name="p_bolAddBreakingChars"></param>
 -----------------------------------------------------------------------------
</member>
    <member name="M:Heuristics.Utility.WebErrors.ReadConfig(System.String)">
 -----------------------------------------------------------------------------
 <summary>
 Reads an item in the config file
 </summary><param name="p_strIn"></param>
 -----------------------------------------------------------------------------
</member>
    <member name="M:Heuristics.Utility.WebErrors.FormatItem(System.String)">
 -----------------------------------------------------------------------------
 <summary>
 Inserts spaces every N characters so it will wrap very long values
 </summary><param name="p_strIn"></param>
 -----------------------------------------------------------------------------
</member>
    <member name="M:Helpers.ValidateNumber(System.Object,Heuristics.Utility.MessageCollection,System.String,System.Boolean,System.Object,System.Object)">
 -----------------------------------------------------------------------------
 <summary>
 Validates that the value is an INTEGER, optionally falling within the specified range.
 </summary>
 -----------------------------------------------------------------------------
</member>
    <member name="M:Helpers.ValidateDecimal(System.Object,Heuristics.Utility.MessageCollection,System.String,System.Boolean,System.Object,System.Object)">
 -----------------------------------------------------------------------------
 <summary>
 Validates that the value is a DECIMAL NUMBER, optionally falling within the specified range.
 </summary>
 -----------------------------------------------------------------------------
</member>
    <member name="T:Heuristics.Library.DesignByContractException">
      <summary>
            Exception raised when a contract is broken.
            </summary>
    </member>
    <member name="M:Heuristics.Library.Utility.Cloner.BinaryClone``1(``0)">
      <summary>
            Performs a binary copy of obj
            </summary>
      <typeparam name="TEntity">Type of object to be copied</typeparam>
      <param name="obj">Instance of type TEntitiy to be copied</param>
      <returns>Copy of obj</returns>
    </member>
    <member name="T:Heuristics.Library.Utility.RegexParser">
      <summary>
            Parses regex strings in Perl or Ruby format (e.g. "/foo/i") into .NET regex strings and
            associated RegexOptions values.
            
            This is mainly a helper class used by the Regex extension methods but can be used directly
            if needed.
            </summary>
    </member>
    <member name="M:Heuristics.Library.Utility.RegexParser.Parse(System.String)">
      <summary>
            Accepts a pattern string like "/foo/i" and returns a Regex option containing the
            string pattern ("foo") and the parsed options. If the pattern does not contain the
            regex markers "/.../" then the entire string is returned.
            </summary>
    </member>
    <member name="M:Heuristics.Library.Utility.RegexParser.Parse(System.String,System.Text.RegularExpressions.RegexOptions)">
      <summary>
            Accepts a pattern string like "/foo/i" and returns a Regex option containing the
            string pattern ("foo") and the parsed options. If the pattern does not contain the
            regex markers "/.../" then the entire string is returned.
            </summary>
    </member>
    <member name="T:Heuristics.Library.Utility.IDataBindable`2">
      <summary>
            Enforces the methods necessary for databinding for non-business objects
            as Key-Value pairs
            </summary>
      <typeparam name="TKey">Key Type</typeparam>
      <typeparam name="TValue">Value Type</typeparam>
    </member>
    <member name="M:Heuristics.Library.Utility.LinqHelper.CopyEntityDeep``1(``0)">
      <summary>
            Makes a copy of an existing Linq to Sql entity and it's children.
            </summary>
      <typeparam name="T">
      </typeparam>
      <param name="entitySource">The Linq to Sql entity to copy</param>
      <returns>
      </returns>
    </member>
    <member name="M:Heuristics.Library.Utility.LinqHelper.CopyEntityListDeep``1(System.Collections.Generic.List{``0})">
      <summary>        
            Makes a copy of a list of existing LINQ to SQL entities and their children.        
            </summary>
      <typeparam name="T">
      </typeparam>
      <param name="source">The LIST of SQL entities to copy        
            </param>        /// <returns></returns></member>
    <member name="T:Heuristics.Library.Utility.AssemblyHelper">
      <summary>
            Static helper class for working with .NET assemblies.
            </summary>
    </member>
    <member name="M:Heuristics.Library.Utility.AssemblyHelper.CreateInstance(System.String)">
      <summary>
            Creates an instance of the specified type. The type name should be in
            "assembly qualified" format and contain both the assembly and type name.
            </summary>
    </member>
    <member name="M:Heuristics.Library.Utility.AssemblyHelper.CreateInstance``1(System.String)">
      <summary>
            Creates an instance of the specified type. The type name should be in
            "assembly qualified" format and contain both the assembly and type name.
            </summary>
    </member>
    <member name="M:Heuristics.Library.Utility.AssemblyHelper.CreateInstance(System.String,System.String)">
      <summary>
            Creates an instance of the specified type. The type name should be specified
            as namespace and class only (e.g. Foo.MyClass) and should exist in the specified
            assembly.
            </summary>
    </member>
    <member name="M:Heuristics.Library.Utility.AssemblyHelper.CreateInstance``1(System.String,System.String)">
      <summary>
            Creates an instance of the specified type. The type name should be specified
            as namespace and class only (e.g. Foo.MyClass) and should exist in the specified
            assembly.
            </summary>
    </member>
    <member name="T:Heuristics.Library.Sys.MailPlusWrapper">
      <summary>
            Adapter class that wraps MailPlus and adapts it to the cleaner IEmail interface.
            </summary>
    </member>
    <member name="T:Heuristics.Library.Sys.DescriptionAttribute">
      <summary>
            Used to decorate enum instances with a human-readable description. The .GetDescription()
            extension method can be used to convert an enum into its description string.
            </summary>
    </member>
    <member name="T:Heuristics.Library.Sys.FileSystemWrapper">
      <summary>
            A wrapper around the base file system objects provided by .NET. When you need to
            access the file system, but you want your code to be testable, code to the
            IFileSystem interface but use this implementation in production.
            </summary>
    </member>
    <member name="M:Heuristics.Library.Sys.FileSystemWrapper.AppendToFile(System.String,System.String)">
      <summary>
            Appends the specified text to the specified file.
            </summary>
    </member>
    <member name="M:Heuristics.Library.Sys.FileSystemWrapper.WriteAllLines(System.String,System.String[])">
      <summary>
            Creates a file, writes the specified lines to it, and closes the file. If the file
            already exists, it is overwritten.
            </summary>
    </member>
    <member name="M:Heuristics.Library.Sys.FileSystemWrapper.WriteFile(System.String,System.String)">
      <summary>
            Creates a file, writes the specified text to it, and closes the file. If the file
            already exists, it is overwritten.
            </summary>
    </member>
    <member name="M:Heuristics.Library.Sys.FileSystemWrapper.DirectoryExists(System.String)">
      <summary>
            Determines whether the given path refers to an existing directory on disk
            </summary>
      <param name="path">The path to test</param>
      <returns>
      </returns>
    </member>
    <member name="M:Heuristics.Library.Sys.FileSystemWrapper.CreateDirectory(System.String)">
      <summary>
            Creates all directories and subdirectories as specified by path.
            </summary>
      <param name="path">The directory path to create</param>
      <returns>
      </returns>
    </member>
    <member name="M:Heuristics.Library.Sys.FileSystemWrapper.CreateDirectory(System.String,System.Security.AccessControl.DirectorySecurity)">
      <summary>
            Creates all directories in the specified by path, applying the specified Windows security.
            </summary>
      <param name="path">The directory to create</param>
      <param name="directorySecurity">The access control to apply to the directory</param>
      <returns>
      </returns>
    </member>
    <member name="T:Heuristics.Library.Sys.FormsAuthWrapper">
      <summary>
            Adapter class that wraps the static FormsAuthentication class and exposes some of its
            functionality via a testable/mockable interface.
            </summary>
    </member>
    <member name="T:Heuristics.Library.Sys.FrozenSystemClock">
      <summary>
            Implementation of ISystemClock that can be used during testing. When this is instantiated
            it takes a snapshot of the current date/time and returns that exact value for each 
            subsequent call to .Now.
            
            Clients can also set a specific date/time value. Once set, the value of the clock will not
            change unless it is manually set again.
            </summary>
    </member>
    <member name="M:Heuristics.Library.Sys.FrozenSystemClock.#ctor">
      <summary>
            Creates an instance of the frozen clock by taking a snapshot of the current date/time.
            </summary>
    </member>
    <member name="M:Heuristics.Library.Sys.FrozenSystemClock.#ctor(System.DateTime)">
      <summary>
            Creates an instance of the frozen clock with the specified date/time.
            </summary>
    </member>
    <member name="T:Heuristics.Library.Sys.ReflectionHelper">
      <summary>
            Static helper class for simplifying common tasks that use reflection.
            </summary>
    </member>
    <member name="M:Heuristics.Library.Sys.ReflectionHelper.GetPropertyName``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary>
            Returns the name of a class property as a string. For instance passing the expression
            (s =&gt; s.Length) would return "Length".
            </summary>
    </member>
    <member name="T:Heuristics.Library.Sys.ShortGuid">
      <summary>
            Represents a globally unique identifier (GUID) with a shorter string value. 
            Based on http://www.singular.co.nz/blog/archive/2007/12/20/shortguid-a-shorter-and-url-friendly-guid-in-c-sharp.aspx
            </summary>
    </member>
    <member name="F:Heuristics.Library.Sys.ShortGuid.Empty">
      <summary>
            A read-only instance of the ShortGuid class whose value 
            is guaranteed to be all zeroes. 
            </summary>
    </member>
    <member name="M:Heuristics.Library.Sys.ShortGuid.#ctor(System.String)">
      <summary>
            Creates a ShortGuid from a base64 encoded string
            </summary>
      <param name="value">The encoded guid as a 
            base64 string</param>
    </member>
    <member name="M:Heuristics.Library.Sys.ShortGuid.#ctor(System.Guid)">
      <summary>
            Creates a ShortGuid from a Guid
            </summary>
      <param name="guid">The Guid to encode</param>
    </member>
    <member name="M:Heuristics.Library.Sys.ShortGuid.ToString">
      <summary>
            Returns the base64 encoded guid as a string
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Heuristics.Library.Sys.ShortGuid.Equals(System.Object)">
      <summary>
            Returns a value indicating whether this instance and a 
            specified Object represent the same type and value.
            </summary>
      <param name="obj">The object to compare</param>
      <returns>
      </returns>
    </member>
    <member name="M:Heuristics.Library.Sys.ShortGuid.GetHashCode">
      <summary>
            Returns the HashCode for underlying Guid.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Heuristics.Library.Sys.ShortGuid.NewGuid">
      <summary>
            Initialises a new instance of the ShortGuid class
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Heuristics.Library.Sys.ShortGuid.Encode(System.String)">
      <summary>
            Creates a new instance of a Guid using the string value, 
            then returns the base64 encoded version of the Guid.
            </summary>
      <param name="value">An actual Guid string (i.e. not a ShortGuid)</param>
      <returns>
      </returns>
    </member>
    <member name="M:Heuristics.Library.Sys.ShortGuid.Encode(System.Guid)">
      <summary>
            Encodes the given Guid as a base64 string that is 22 
            characters long.
            </summary>
      <param name="guid">The Guid to encode</param>
      <returns>
      </returns>
    </member>
    <member name="M:Heuristics.Library.Sys.ShortGuid.Decode(System.String)">
      <summary>
            Decodes the given base64 string
            </summary>
      <param name="value">The base64 encoded string of a Guid</param>
      <returns>A new Guid</returns>
    </member>
    <member name="M:Heuristics.Library.Sys.ShortGuid.op_Equality(Heuristics.Library.Sys.ShortGuid,Heuristics.Library.Sys.ShortGuid)">
      <summary>
            Determines if both ShortGuids have the same underlying 
            Guid value.
            </summary>
      <param name="x">
      </param>
      <param name="y">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Heuristics.Library.Sys.ShortGuid.op_Inequality(Heuristics.Library.Sys.ShortGuid,Heuristics.Library.Sys.ShortGuid)">
      <summary>
            Determines if both ShortGuids do not have the 
            same underlying Guid value.
            </summary>
      <param name="x">
      </param>
      <param name="y">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Heuristics.Library.Sys.ShortGuid.op_Implicit(Heuristics.Library.Sys.ShortGuid)~System.String">
      <summary>
            Implicitly converts the ShortGuid to it's string equivilent
            </summary>
      <param name="shortGuid">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Heuristics.Library.Sys.ShortGuid.op_Implicit(Heuristics.Library.Sys.ShortGuid)~System.Guid">
      <summary>
            Implicitly converts the ShortGuid to it's Guid equivilent
            </summary>
      <param name="shortGuid">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Heuristics.Library.Sys.ShortGuid.op_Implicit(System.String)~Heuristics.Library.Sys.ShortGuid">
      <summary>
            Implicitly converts the string to a ShortGuid
            </summary>
      <param name="shortGuid">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Heuristics.Library.Sys.ShortGuid.op_Implicit(System.Guid)~Heuristics.Library.Sys.ShortGuid">
      <summary>
            Implicitly converts the Guid to a ShortGuid 
            </summary>
      <param name="guid">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:Heuristics.Library.Sys.ShortGuid.Guid">
      <summary>
            Gets/sets the underlying Guid
            </summary>
    </member>
    <member name="P:Heuristics.Library.Sys.ShortGuid.Value">
      <summary>
            Gets/sets the underlying base64 encoded string
            </summary>
    </member>
    <member name="T:Heuristics.Library.Sys.StringConstantAttribute">
      <summary>
            Maps an enum to a string constant.
            </summary>
    </member>
    <member name="T:Heuristics.Library.Sys.SystemClock">
      <summary>
            Default implementation of ISystemClock. Delegates to DateTime.Now.
            </summary>
    </member>
    <member name="T:Heuristics.Library.Sys.NameValueType`2">
      <summary>
            NOTE: .NET has a built-in struct type called KeyValuePair that does pretty much the same
            thing as this class. Unless you specifically need something offered by this class (such
            as the ability to call setters for the Key and Value items) you should probably use
            the built-in type. Since KeyValuePair is a struct, not a class, it will be allocated on
            the stack, and that might equate to minor performance improvements.
            </summary>
    </member>
    <member name="M:Heuristics.Library.Sys.NameValueListBase`2.Value(`0)">
      <summary>
            Returns the value corresponding to the
            specified key.
            </summary>
      <param name="key">Key value for which to retrieve a value.</param>
    </member>
    <member name="M:Heuristics.Library.Sys.NameValueListBase`2.Key(`1)">
      <summary>
            Returns the key corresponding to the
            first occurance of the specified value
            in the list.
            </summary>
      <param name="value">Value for which to retrieve the key.</param>
    </member>
    <member name="M:Heuristics.Library.Sys.NameValueListBase`2.ContainsKey(`0)">
      <summary>
            Gets a value indicating whether the list contains the
            specified key.
            </summary>
      <param name="key">Key value for which to search.</param>
    </member>
    <member name="M:Heuristics.Library.Sys.NameValueListBase`2.ContainsValue(`1)">
      <summary>
            Gets a value indicating whether the list contains the
            specified value.
            </summary>
      <param name="value">Value for which to search.</param>
    </member>
    <member name="M:Heuristics.Library.Sys.NameValueListBase`2.GetItemByValue(`1)">
      <summary>
            Get the item for the first matching
            value in the collection.
            </summary>
      <param name="value">
            Value to search for in the list.
            </param>
      <returns>Item from the list.</returns>
    </member>
    <member name="M:Heuristics.Library.Sys.NameValueListBase`2.GetItemByKey(`0)">
      <summary>
            Get the item for the first matching
            key in the collection.
            </summary>
      <param name="key">
            Key to search for in the list.
            </param>
      <returns>Item from the list.</returns>
    </member>
    <member name="M:Heuristics.Library.Sys.NameValueListBase`2.Remove(`0)">
      <summary>
            Removes the item for the first matcing
            key in the collection.
            </summary>
      <param name="key">
            Key to search for in the list.
            </param>
    </member>
    <member name="P:Heuristics.Library.Sys.NameValueListBase`2.IsEmpty">
      <summary>
            Returns true if the list is empty
            </summary>
    </member>
    <member name="T:Heuristics.Library.Interfaces.IEmail">
      <summary>
            Represents an object capable of sending emails.
            </summary>
    </member>
    <member name="T:Heuristics.Library.Interfaces.IFileSystem">
      <summary>
            Represents an object capable of interacting with the file system. Used to decouple 
            code from the built-in static I/O objects like File and Directory so that calls
            to them can be mocked during testing.
            </summary>
    </member>
    <member name="T:Heuristics.Library.Interfaces.IFormsAuth">
      <summary>
            Interface that mirrors the FormsAuthentication static class.
            </summary>
    </member>
    <member name="T:Heuristics.Library.Interfaces.IStringConstant">
      <summary>
            Declares that a class instance maps to a specific string constant, and defines
            a method for getting that constant. This is commonly used by attribute classes
            that are used with Enums to associate an enum instance with a string representation
            that is stored in a database.
            </summary>
    </member>
    <member name="T:Heuristics.Library.Interfaces.ISystemClock">
      <summary>
            Interface for classes that provide the current date/time. This is used
            to decouple classes from DateTime.Now so that the code can be tested/mocked.
            </summary>
    </member>
    <member name="T:Heuristics.Library.Extensions.BooleanExtensions">
      <summary>
            Extension methods that operate on Boolean instances.
            </summary>
    </member>
    <member name="T:Heuristics.Library.Extensions.DecimalExtensions">
      <summary>
            Extensions that operate on Decimal values.
            </summary>
    </member>
    <member name="M:Heuristics.Library.Extensions.DecimalExtensions.WithoutTrailingZeroes(System.Decimal)">
      <summary>
            Formats a decimal number, but trims any trailing zeroes. 5.50 would print as "5.5", and 5.0 would print as "5".
            </summary>
    </member>
    <member name="M:Heuristics.Library.Extensions.NullableExtensions.ValueOrDefault``1(System.Nullable{``0},``0)">
      <summary>
            Returns the wrapped (non-nullable) value if it is not null, or the specified default if it is.
            Syntactic sugar for obj.HasValue ? obj.Value : defaultVal;
            </summary>
    </member>
    <member name="M:Heuristics.Library.Extensions.NullableExtensions.ValueOrThrow``1(System.Nullable{``0},System.String)">
      <summary>
            Returns the non-nullable wrapped value, or throws an exception with the specified message.
            </summary>
    </member>
    <member name="M:Heuristics.Library.Extensions.IntegerExtensions.IsEven(System.Int32)">
      <summary>
            Returns TRUE if the value is even [which includes zero].
            </summary>
    </member>
    <member name="M:Heuristics.Library.Extensions.IntegerExtensions.IsOdd(System.Int32)">
      <summary>
            Returns TRUE if the value is odd.
            </summary>
    </member>
    <member name="T:Heuristics.Library.Extensions.FuentCollectionAPI">
      <summary>
            Extensions that allow for chainable, fluent collection manipulation.
            </summary>
    </member>
    <member name="T:Heuristics.Library.Extensions.RegularExpressionExtensions">
      <summary>
            Extensions that add regex based functions to strings.
            </summary>
    </member>
    <member name="M:Heuristics.Library.Extensions.RegularExpressionExtensions.CountRegex(System.String,System.String)">
      <summary>
            Returns the number of times the specified regex is found within the target string.
            </summary>
      <param name="p_regex">May be specified in .NET style [just the pattern], or in Perl style like "/foo/i"</param>
    </member>
    <member name="M:Heuristics.Library.Extensions.RegularExpressionExtensions.CountRegex(System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
      <summary>
            Returns the number of times the specified regex is found within the target string.
            </summary>
      <param name="p_regex">May be specified in .NET style [just the pattern], or in Perl style like "/foo/i"</param>
    </member>
    <member name="M:Heuristics.Library.Extensions.RegularExpressionExtensions.Extract(System.String,System.String)">
      <summary>
            Returns the portion of the string matching the specified regular expression. 
            If a subgroup is specified using () then only the subgroup is returned.
            </summary>
      <param name="p_regex">May be specified in .NET style [just the pattern], or in Perl style like "/foo/i"</param>
    </member>
    <member name="M:Heuristics.Library.Extensions.RegularExpressionExtensions.Extract(System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
      <summary>
            Returns the portion of the string matching the specified regular expression. 
            If a subgroup is specified using () then only the subgroup is returned.
            </summary>
      <param name="p_regex">May be specified in .NET style [just the pattern], or in Perl style like "/foo/i"</param>
    </member>
    <member name="M:Heuristics.Library.Extensions.RegularExpressionExtensions.Extract(System.String,System.String,System.String)">
      <summary>
            Returns the portion of the string matching the specified regular expression. 
            If a subgroup is specified using () then only the subgroup is returned.
            </summary>
      <param name="p_regex">May be specified in .NET style [just the pattern], or in Perl style like "/foo/i"</param>
    </member>
    <member name="M:Heuristics.Library.Extensions.RegularExpressionExtensions.Extract(System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.String)">
      <summary>
            Returns the portion of the string matching the specified regular expression. 
            If a subgroup is specified using () then only the subgroup is returned.
            </summary>
      <param name="p_regex">May be specified in .NET style [just the pattern], or in Perl style like "/foo/i"</param>
    </member>
    <member name="M:Heuristics.Library.Extensions.RegularExpressionExtensions.MatchesRegex(System.String,System.String)">
      <summary>
            Returns TRUE if the string is a match for the specified regular expression. 
            </summary>
      <param name="p_regex">May be specified in .NET style [just the pattern], or in Perl style like "/foo/i"</param>
    </member>
    <member name="M:Heuristics.Library.Extensions.RegularExpressionExtensions.MatchesRegex(System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
      <summary>
            Returns TRUE if the string is a match for the specified regular expression. 
            </summary>
      <param name="p_regex">May be specified in .NET style [just the pattern], or in Perl style like "/foo/i"</param>
    </member>
    <member name="M:Heuristics.Library.Extensions.RegularExpressionExtensions.MatchesRegex(System.String,System.String,System.Text.RegularExpressions.MatchCollection@)">
      <summary>
            Returns TRUE if the string is a match for the specified regular expression. Any matches
            are returned using an out parameter.
            </summary>
      <param name="p_regex">May be specified in .NET style [just the pattern], or in Perl style like "/foo/i"</param>
    </member>
    <member name="M:Heuristics.Library.Extensions.RegularExpressionExtensions.MatchesRegex(System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.Text.RegularExpressions.MatchCollection@)">
      <summary>
            Returns TRUE if the string is a match for the specified regular expression. Any matches
            are returned using an out parameter.
            </summary>
      <param name="p_regex">May be specified in .NET style [just the pattern], or in Perl style like "/foo/i"</param>
    </member>
    <member name="M:Heuristics.Library.Extensions.RegularExpressionExtensions.MatchesRegexIgnoringCase(System.String,System.String)">
      <summary>
            Returns true if the string is a case-insensitive match for the specified regular 
            expression. 
            </summary>
    </member>
    <member name="M:Heuristics.Library.Extensions.RegularExpressionExtensions.ReplaceRegex(System.String,System.String,System.String)">
      <summary>
            Replaces all instances of the specified regular expression and returns the result.
            </summary>
    </member>
    <member name="M:Heuristics.Library.Extensions.RegularExpressionExtensions.ReplaceRegex(System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.String)">
      <summary>
            Replaces all instances of the specified regular expression and returns the result.
            </summary>
    </member>
    <member name="T:Heuristics.Library.Extensions.HtmlFormattingExtensions">
      <summary>
            Extensions that convert strings to and from HTML.
            </summary>
    </member>
    <member name="M:Heuristics.Library.Extensions.HtmlFormattingExtensions.ToAttributeEncoded(System.String)">
      <summary>
            Syntactic sugar for Html.AttributeEncode(). Converts null input to an empty string, to allow for method chaining.
            </summary>
    </member>
    <member name="M:Heuristics.Library.Extensions.HtmlFormattingExtensions.ToEmailLink(System.String)">
      <summary>
            Given a string representing an email address, returns the "mailto" link for that address.
            The string is html encoded by this extension, so the result does not need to be explicitly
            encoded.
            </summary>
    </member>
    <member name="M:Heuristics.Library.Extensions.HtmlFormattingExtensions.ToHtmlEncoded(System.String)">
      <summary>
            Syntactic sugar for Html.Encode().
            </summary>
    </member>
    <member name="M:Heuristics.Library.Extensions.HtmlFormattingExtensions.ToJavascriptString(System.String)">
      <summary>
            Makes a string "Javascript safe" by escaping quotes and embedded newlines. Use this when
            encoding strings for usage in inline javascript (like an inline click handler).
            
            WARNING: There are a few issues with this method. Rather than fix them and risk introducing
            bugs, I'm creating a new implementation ToSingleQuotedJavascriptString() instead.
            
            Issue 1: The character entities are not terminated with a semicolon, but should be
            
            Issue 2: Single AND double quotes are escaped. This is incorrect and can cause data corruption;
            	     only one type of quote should be escaped, according to the quotes used to surround this
            	     value in the calling code.
            </summary>
    </member>
    <member name="M:Heuristics.Library.Extensions.HtmlFormattingExtensions.ToSingleQuotedJavascriptString(System.String)">
      <summary>
            Encodes a string so that it can be used in inline JavaScript. This is designed to be used
            as a SINGLE QUOTES string literal; it converts single and double quotes to their character entities,
            converts newlines to "\n", and then ESCAPES the encoded single quote. 
            
            The quote -&gt; character encoding is done so that embedded quotes do not confuse the HTML parser.
            
            Single quotes are escaped because the character codes are converted back into quotes by the HTML parser,
            before being executed as script. Therefore, any embedded single quotes need escaped to create a valid
            string literal.
            </summary>
    </member>
    <member name="M:Heuristics.Library.Extensions.HtmlFormattingExtensions.ToJavascriptEncoded(System.String)">
      <summary>
            Makes a string "Javascript safe" by encoding all special characters. This is essentially a JSON
            formatted string literal. Use this when encoding a string for assignment to a javascript variable.
            
            The returned string is designed to be used inside of DOUBLE QUOTES. This means that double quotes
            are escaped but SINGLE QUOTES ARE NOT.
            
            From http://www.west-wind.com/weblog/posts/2007/Jul/14/Embedding-JavaScript-Strings-from-an-ASPNET-Page
            </summary>
    </member>
    <member name="M:Heuristics.Library.Extensions.HtmlFormattingExtensions.ToPlainText(System.String)">
      <summary>
            Removes HTML tags from a string, returning a plain text representation of that string.
            This is a fairly robust implementation, but it uses RegEx and is primarily designed
            for displaying simple summaries of simple HTML markup. If accuracy is critically important
            to you then consider using an HTML parsing framework instead.
            </summary>
    </member>
    <member name="T:Heuristics.Library.Extensions.DateTimeExtensions">
      <summary>
            Extension methods that operate on DateTime instances.
            </summary>
    </member>
    <member name="M:Heuristics.Library.Extensions.DateTimeExtensions.AddDays(System.Nullable{System.DateTime},System.Int32)">
      <summary>
            Null-safe version of .AddDays(). Does nothing if the reference is null.
            </summary>
    </member>
    <member name="M:Heuristics.Library.Extensions.DateTimeExtensions.AtStartOfDay(System.DateTime)">
      <summary>
            Returns the date with a time portion of 00:00.
            </summary>
    </member>
    <member name="M:Heuristics.Library.Extensions.DateTimeExtensions.AtEndOfDay(System.DateTime)">
      <summary>
            Returns the date with a time portion of 11:59pm.
            </summary>
    </member>
    <member name="M:Heuristics.Library.Extensions.DateTimeExtensions.AtStartOfDayOrNull(System.Nullable{System.DateTime})">
      <summary>
            If the reference is null, returns null. Otherwise returns the date with a time portion of 00:00.
            </summary>
    </member>
    <member name="M:Heuristics.Library.Extensions.DateTimeExtensions.AtEndOfDayOrNull(System.Nullable{System.DateTime})">
      <summary>
            If the reference is null, returns null. Otherwise returns the date with a time portion of 11:59pm.
            </summary>
    </member>
    <member name="M:Heuristics.Library.Extensions.DateTimeExtensions.Format(System.DateTime,System.String)">
      <summary>
             Formats a date/time value using the HS DateFormatter, which uses slightly different format
             strings than the built-in ToString() overload. 
             
             This is a functional equivalent to DateFormatter.Format().
            
             Available Tokens:<br />
             Date:
             <ul><li>$D - Full day name</li><li>$d - Short day name</li><li>#D - Long day number</li><li>#d - Short day number</li><li>$M - Long month name</li><li>$m - Short month name</li><li>#M - Long month number</li><li>#m - Short month number</li><li>#Y - Long year number</li><li>#y - Short year number</li></ul>
             
             Time:
             <ul><li>#H - Long hour</li><li>#h - Short hour</li><li>#I - Long minute</li><li>#i - Short minute</li><li>#S - Long second</li><li>#s - Short second</li><li>#T - Long time string</li><li>#t - Short time string</li></ul>
             
             Other:
             <ul><li>## - Literal #</li><li>$$ - Literal $</li></ul></summary>
    </member>
    <member name="M:Heuristics.Library.Extensions.DateTimeExtensions.Format(System.Nullable{System.DateTime},System.String,System.String)">
      <summary>
            Null-safe wrapper for HS DateFormatter.Format(). Formats the date using the specified
            format string, or returns the specified string if the date is null.
            </summary>
    </member>
    <member name="M:Heuristics.Library.Extensions.DateTimeExtensions.IsBetween(System.DateTime,System.DateTime,System.DateTime)">
      <summary>
            Returns true if the date is between the two specified dates, inclusive.
            </summary>
    </member>
    <member name="M:Heuristics.Library.Extensions.DateTimeExtensions.Quarter(System.DateTime)">
      <summary>
            Extension method for DateTime used to determine the
            calendar year quarter for the theDate.
            </summary>
      <param name="theDate">The DateTime instance for which to determine the quarter.</param>
      <returns>the calendar quarter for theDate.</returns>
    </member>
    <member name="M:Heuristics.Library.Extensions.DateTimeExtensions.ToStringNullSafe(System.Nullable{System.DateTime},System.String,System.String)">
      <summary>
            If the DateTime is not null, format it with the specified format string. Otherwise,
            returns the ifNull value.
            </summary>
    </member>
    <member name="M:Heuristics.Library.Extensions.DateTimeExtensions.ToSqlSafeDate(System.DateTime)">
      <summary>
            Squeezes a date/time value into a range that is compatible with SQL Server.
            </summary>
    </member>
    <member name="M:Heuristics.Library.Extensions.DictionaryExtensions.Get``2(System.Collections.Generic.IDictionary{``0,``1},``0)">
      <summary>
            Returns the value at the specified key, or throws a not found error.
            </summary>
    </member>
    <member name="M:Heuristics.Library.Extensions.DictionaryExtensions.Get``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1)">
      <summary>
            Returns the value at the specified key, or the specified default if the key is not found.
            </summary>
    </member>
    <member name="M:Heuristics.Library.Extensions.DictionaryExtensions.Merge``2(System.Collections.Generic.IDictionary{``0,``1},System.Collections.Generic.IDictionary{``0,``1})">
      <summary>
            Adds all values from the specified dictionary into the target dictionary, replacing
            any keys that already exist.
            </summary>
    </member>
    <member name="M:Heuristics.Library.Extensions.DictionaryExtensions.Merge``2(System.Collections.Generic.IDictionary{``0,``1},System.Collections.Generic.IDictionary{``0,``1},System.Boolean)">
      <summary>
            Adds all values from the specified dictionary into the target dictionary.
            </summary>
    </member>
    <member name="M:Heuristics.Library.Extensions.DictionaryExtensions.ReplaceValue``2(System.Collections.Generic.Dictionary{``0,``1},``0,``1)">
      <summary>
            Replaces the value for the specified key. If the key is not found, does nothing.
            </summary>
    </member>
    <member name="T:Heuristics.Library.Extensions.EnumerableExtensions">
      <summary>
            Extensions that operate on enumerable p_sequences of items, preserving their semantics as a 
            JIT, on-demand data structure. (e.g. these extensions should not convert p_sequences to lists)
            </summary>
    </member>
    <member name="M:Heuristics.Library.Extensions.EnumerableExtensions.FirstOrThrow``1(System.Collections.Generic.IEnumerable{``0},System.String)">
      <summary>
            Returns the first item from the sequence, or thows an exception with the specified message
            if the sequence is null or empty.
            </summary>
    </member>
    <member name="M:Heuristics.Library.Extensions.EnumerableExtensions.IsNullOrEmpty(System.Collections.IEnumerable)">
      <summary>
            Returns TRUE if the sequence is null or has no items. Returns FALSE in all other cases.
            </summary>
    </member>
    <member name="M:Heuristics.Library.Extensions.EnumerableExtensions.IsNullOrEmpty``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>
            Returns TRUE if the p_sequence is null or has no items. Returns FALSE in all other cases.
            </summary>
    </member>
    <member name="M:Heuristics.Library.Extensions.EnumerableExtensions.IsNotNullOrEmpty(System.Collections.IEnumerable)">
      <summary>
            Returns TRUE if the sequence is not null AND has 1 or more items.
            </summary>
    </member>
    <member name="M:Heuristics.Library.Extensions.EnumerableExtensions.IsNotNullOrEmpty``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>
            Returns TRUE if the sequence is not null AND has 1 or more items.
            </summary>
    </member>
    <member name="M:Heuristics.Library.Extensions.EnumerableExtensions.MaxOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
      <summary>
            Same as IEnumerable[T].Max(), except that it returns 0 instead of an exception if
            the sequence is null or empty.
            </summary>
    </member>
    <member name="M:Heuristics.Library.Extensions.EnumerableExtensions.MaxOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
      <summary>
            Same as IEnumerable[T].Max(), except that it returns 0 instead of an exception if
            the sequence is null or empty.
            </summary>
    </member>
    <member name="M:Heuristics.Library.Extensions.EnumerableExtensions.MaxOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
      <summary>
            Same as IEnumerable[T].Max(), except that it returns 0 instead of an exception if
            the sequence is null or empty.
            </summary>
    </member>
    <member name="M:Heuristics.Library.Extensions.EnumerableExtensions.MinOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
      <summary>
            Same as IEnumerable[T].Min(), except that it returns 0 instead of an exception if
            the sequence is null or empty.
            </summary>
    </member>
    <member name="M:Heuristics.Library.Extensions.EnumerableExtensions.MinOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
      <summary>
            Same as IEnumerable[T].Min(), except that it returns 0 instead of an exception if
            the sequence is null or empty.
            </summary>
    </member>
    <member name="M:Heuristics.Library.Extensions.EnumerableExtensions.MinOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
      <summary>
            Same as IEnumerable[T].Min(), except that it returns 0 instead of an exception if
            the sequence is null or empty.
            </summary>
    </member>
    <member name="M:Heuristics.Library.Extensions.EnumerableExtensions.None``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
      <summary>
            Syntactic sugar for the inverse of Any()
            </summary>
    </member>
    <member name="M:Heuristics.Library.Extensions.EnumerableExtensions.SingleOrThrow``1(System.Collections.Generic.IEnumerable{``0},System.String)">
      <summary>
            Returns the one and only item from the sequence, or thows an exception with the specified message
            if the sequence is null, empty, or has more than 1 item.
            </summary>
    </member>
    <member name="M:Heuristics.Library.Extensions.EnumerableExtensions.TakeOrThrow``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.String)">
      <summary>
            Takes the specified number of items and returns them as a list, throwing the specified
            exception if the sequence wasn't large enough.
            </summary>
    </member>
    <member name="M:Heuristics.Library.Extensions.EnumerableExtensions.ToEmptyIfNull``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>
            Returns the original sequence or a new, empty list.
            </summary>
    </member>
    <member name="T:Heuristics.Library.Extensions.EnumExtensions">
      <summary>
            Extensions that operate on Enum values.
            </summary>
    </member>
    <member name="M:Heuristics.Library.Extensions.EnumExtensions.GetAttributes``1(System.Enum)">
      <summary>
            Returns an array of attributes of the specified type applied to the given enum value.
            </summary>
    </member>
    <member name="M:Heuristics.Library.Extensions.EnumExtensions.GetDescription(System.Enum)">
      <summary>
            Returns the value of the Description attribute that decorates this enum, or the
            enum's .ToString() result if no such attribute is found.
            </summary>
    </member>
    <member name="M:Heuristics.Library.Extensions.EnumExtensions.GetStringConstant(System.Enum)">
      <summary>
            Returns the string constant associated with the specified enum value, or the value's
            .ToString() result if no string constant attribute is applied.
            </summary>
    </member>
    <member name="M:Heuristics.Library.Extensions.EnumExtensions.ToDescription(System.Enum)">
      <summary>
            Returns the value of the Description attribute that decorates this enum, or the
            enum's .ToString() result if no such attribute is found.
            </summary>
    </member>
    <member name="M:Heuristics.Library.Extensions.EnumExtensions.ToStringConstant(System.Enum)">
      <summary>
            Returns the string constant associated with the specified enum value, or the value's
            .ToString() result if no string constant attribute is applied.
            </summary>
    </member>
    <member name="T:Heuristics.Library.Extensions.ListExtensions">
      <summary>
            Extensions that operate on lists of items or that treat IEnumerable sequences as lists, rather
            than as a JIT sequence.
            </summary>
    </member>
    <member name="M:Heuristics.Library.Extensions.ListExtensions.IsIn``1(``0,System.Collections.Generic.IList{``0})">
      <summary>
            Returns TRUE if the target value is found in the specified list.
            </summary>
    </member>
    <member name="M:Heuristics.Library.Extensions.ListExtensions.IsIn``1(``0,``0[])">
      <summary>
            Returns TRUE if the target value is found in the specified list.
            </summary>
    </member>
    <member name="M:Heuristics.Library.Extensions.ListExtensions.IsInIgnoringCase(System.String,System.Collections.Generic.IList{System.String})">
      <summary>
            Returns TRUE if the target string is found in the specified list using a case-insensitive
            comparison. Syntactic sugar for List.Contains(value, StringComparer.CurrentCultureIgnoreCase).
            </summary>
    </member>
    <member name="M:Heuristics.Library.Extensions.ListExtensions.IsInIgnoringCase(System.String,System.String[])">
      <summary>
            Returns TRUE if the target string is found in the specified list using a case-insensitive
            comparison. Syntactic sugar for List.Contains(value, StringComparer.CurrentCultureIgnoreCase).
            </summary>
    </member>
    <member name="M:Heuristics.Library.Extensions.ListExtensions.IsNotIn``1(``0,System.Collections.Generic.IList{``0})">
      <summary>
            Returns TRUE if the target value is NOT found in the specified list.
            </summary>
    </member>
    <member name="M:Heuristics.Library.Extensions.ListExtensions.IsNotIn``1(``0,``0[])">
      <summary>
            Returns TRUE if the target value is NOT found in the specified list.
            </summary>
    </member>
    <member name="M:Heuristics.Library.Extensions.ListExtensions.IsNotInIgnoringCase(System.String,System.Collections.Generic.IList{System.String})">
      <summary>
            Returns TRUE if the target string is NOT found in the specified list using a case-insensitive
            comparison. Syntactic sugar for !List.Contains(value, StringComparer.CurrentCultureIgnoreCase).
            </summary>
    </member>
    <member name="M:Heuristics.Library.Extensions.ListExtensions.IsNotInIgnoringCase(System.String,System.String[])">
      <summary>
            Returns TRUE if the target string is NOT found in the specified list using a case-insensitive
            comparison. Syntactic sugar for !List.Contains(value, StringComparer.CurrentCultureIgnoreCase).
            </summary>
    </member>
    <member name="M:Heuristics.Library.Extensions.ListExtensions.IsNullOrEmpty``1(System.Collections.Generic.IList{``0})">
      <summary>
            Returns TRUE if the instance is null or has no items.
            </summary>
    </member>
    <member name="M:Heuristics.Library.Extensions.ListExtensions.IsNotNullOrEmpty``1(System.Collections.Generic.IList{``0})">
      <summary>
            Returns TRUE if the list is not null AND has 1 or more items.
            </summary>
    </member>
    <member name="M:Heuristics.Library.Extensions.ListExtensions.Join(System.Collections.IEnumerable,System.String)">
      <summary>
            Concatenates all items in the list into a string, delimited by the specified
            delimiter.
            </summary>
    </member>
    <member name="M:Heuristics.Library.Extensions.ListExtensions.ToEmptyIfNull``1(System.Collections.Generic.IList{``0})">
      <summary>
            Returns the original sequence or a new, empty list.
            </summary>
    </member>
    <member name="M:Heuristics.Library.Extensions.ObjectExtensions.GetPrivateField``1(System.Object,System.String)">
      <summary>
            Uses reflection to obtain the value of the specified private field.
            </summary>
      <typeparam name="T">The type of value to obtain.</typeparam>
    </member>
    <member name="M:Heuristics.Library.Extensions.ObjectExtensions.GetPrivateField(System.Object,System.String)">
      <summary>
            Uses reflection to obtain the value of the specified private field.
            </summary>
    </member>
    <member name="M:Heuristics.Library.Extensions.ObjectExtensions.GetProperty(System.Object,System.String)">
      <summary>
            Uses reflection to obtain the value at the specified property.
            </summary>
    </member>
    <member name="M:Heuristics.Library.Extensions.ObjectExtensions.GetProperty``1(System.Object,System.String)">
      <summary>
            Uses reflection to obtain the value at the specified property, and returns it 
            cast to the specified type.
            </summary>
    </member>
    <member name="M:Heuristics.Library.Extensions.ObjectExtensions.GetPropertyOrDefault``1(System.Object,System.String,``0)">
      <summary>
            Uses reflection to obtain the value at the specified property, and returns it 
            cast to the specified type. If the property is not found or if the cast fails,
            the specified default is returned instead.
            </summary>
    </member>
    <member name="M:Heuristics.Library.Extensions.ObjectExtensions.IsNull(System.Object)">
      <summary>
            Returns TRUE if the object instance is null.
            </summary>
    </member>
    <member name="M:Heuristics.Library.Extensions.ObjectExtensions.IsNullOrEmpty(System.Object)">
      <summary>
            Returns TRUE if the object instance is null, is an enumerable sequence with
            one or more item, or is a non-empty string. Returns FALSE otherwise.
            </summary>
    </member>
    <member name="M:Heuristics.Library.Extensions.ObjectExtensions.IsNotNull(System.Object)">
      <summary>
            Returns TRUE if the object instance is not null.
            </summary>
    </member>
    <member name="M:Heuristics.Library.Extensions.ObjectExtensions.IsNotNullOrEmpty(System.Object)">
      <summary>
            Returns TRUE if the object instance is not null and is not an empty enumerable sequence 
            or a non-empty string. Returns FALSE otherwise.
            </summary>
    </member>
    <member name="M:Heuristics.Library.Extensions.ObjectExtensions.SetProperty(System.Object,System.String,System.Object)">
      <summary>
            Uses reflection to set the specified property to the specified value.
            </summary>
    </member>
    <member name="M:Heuristics.Library.Extensions.ObjectExtensions.ThrowIfNull``1(``0,System.String)">
      <summary>
            Throws a NullReferenceException with the specified message if the target item is null.
            This is intended mainly for method chaining scenarios; it allows the null-check to be 
            included in the chain, rather than as a standalone statement at the end of the chain.
            </summary>
    </member>
    <member name="M:Heuristics.Library.Extensions.ObjectExtensions.ThrowIfNullOrEmpty``1(``0,System.String)">
      <summary>
            Throws an ApplicationException if the sequence is null or empty.
            This is intended mainly for method chaining scenarios; it allows the null-check to be 
            included in the chain, rather than as a standalone statement at the end of the chain.
            </summary>
    </member>
    <member name="M:Heuristics.Library.Extensions.ObjectExtensions.ToPropertyDictionary(System.Object)">
      <summary>
            Returns a dictionary with keys and values that matching the names and values of the
            object's public properties.
            </summary>
    </member>
    <member name="M:Heuristics.Library.Extensions.ObjectExtensions.ToStringNullSafe(System.Object)">
      <summary>
            Returns the string representation of the given object instance, or String.Empty.
            </summary>
    </member>
    <member name="M:Heuristics.Library.Extensions.ObjectExtensions.ToStringNullSafe(System.Object,System.String)">
      <summary>
            Returns the string representation of the given object instance, or the specified value
            if the instance is null.
            </summary>
    </member>
    <member name="T:Heuristics.Library.Extensions.ParsingAndConversionExtensions">
      <summary>
            Extension methods for parsing strings to various types, or converting between types.
            </summary>
    </member>
    <member name="M:Heuristics.Library.Extensions.ParsingAndConversionExtensions.ToBoolean(System.String)">
      <summary>
            Parses the string as a boolean, matching commonly used representations ("1", "Y", "no", etc)
            to their appropriate boolean p_value. Throws an exception if the string does not match
            any expected representation.
            </summary>
    </member>
    <member name="M:Heuristics.Library.Extensions.ParsingAndConversionExtensions.ToBoolean(System.String,System.Boolean)">
      <summary>
            Parses the string as a boolean, matching commonly used representations ("1", "Y", "no", etc)
            to their appropriate boolean p_value. 
            </summary>
    </member>
    <member name="M:Heuristics.Library.Extensions.ParsingAndConversionExtensions.ToEnum``1(System.String,System.Boolean)">
      <summary>
            Converts a string into an instance of the specified Enum. The p_value is compared
            first against the enum's ToString() p_value, then against its StringConstant 
            attribute, and finally against it's Description attribute. If no matches are found,
            an ArgumentException is thrown.
            </summary>
    </member>
    <member name="M:Heuristics.Library.Extensions.ParsingAndConversionExtensions.ToEnum``1(System.String,``0)">
      <summary>
            Converts a string into an instance of the specified Enum. The p_value is compared
            first against the enum's ToString() p_value, then against its StringConstant 
            attribute, and finally against it's Description attribute. If no matches are found,
            the specified default is returned.
            </summary>
    </member>
    <member name="M:Heuristics.Library.Extensions.ParsingAndConversionExtensions.ToEnumList``1(System.Collections.Generic.IEnumerable{System.String})">
      <summary>
            Converts a list of strings into a list of enum instances. Each item in the
            list is converted using ToEnum(), and any values that cannot be converted
            are silently ignored.
            </summary>
    </member>
    <member name="M:Heuristics.Library.Extensions.ParsingAndConversionExtensions.ToIntegerList(System.String)">
      <summary>
            Parses a comma delimited string as a list of Integers.
            </summary>
    </member>
    <member name="M:Heuristics.Library.Extensions.ParsingAndConversionExtensions.ToIntegerList(System.String,System.String)">
      <summary>
            Parses a delimited string as a list of Integers.
            </summary>
    </member>
    <member name="M:Heuristics.Library.Extensions.ParsingAndConversionExtensions.ToKeyValuePair(System.String,System.String)">
      <summary>
            Splits a string into a Key/Value pair on the specified delimiter.
            </summary>
    </member>
    <member name="M:Heuristics.Library.Extensions.ParsingAndConversionExtensions.ToNameValueCollection(System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>
            Converts a dictionary into a NameValueCollection.
            </summary>
    </member>
    <member name="M:Heuristics.Library.Extensions.ParsingAndConversionExtensions.ToNullableEnum``1(System.String,System.Boolean)">
      <summary>
            Converts a string into an instance of the specified Enum. The p_value is compared
            first against the enum's ToString() p_value, then against its StringConstant 
            attribute, and finally against it's Description attribute. If no matches are found,
            NULL is returned.
            </summary>
    </member>
    <member name="T:Heuristics.Library.Extensions.QueryableExtensions">
      <summary>
            Extensions that operate on queryable sequences of items, such as Linq-to-Sql tables.
            </summary>
    </member>
    <member name="M:Heuristics.Library.Extensions.QueryableExtensions.TakeOrThrow``1(System.Linq.IQueryable{``0},System.Int32,System.String)">
      <summary>
            Takes the specified number of items and returns them as a list, throwing the specified
            exception if the sequence wasn't large enough.
            </summary>
    </member>
    <member name="T:Heuristics.Library.Extensions.QuerystringExtensions">
      <summary>
            Extensions for working with various representations of a Querystring, such as the
            NameValueCollection that holds values from a HttpRequest or a string representation
            of the URL values.
            </summary>
    </member>
    <member name="M:Heuristics.Library.Extensions.QuerystringExtensions.ToQueryString(System.Collections.Specialized.NameValueCollection)">
      <summary>
            Builds a querystring using a name/value collection. Returns an empty string
            if the collection is empty, otherwise returns a properly formed querystring
            that begins with "?", separates key/value pairs with "=", and has url-encoded
            values.
            </summary>
    </member>
    <member name="M:Heuristics.Library.Extensions.QuerystringExtensions.SetQuerystringParam(System.String,System.String,System.String)">
      <summary>
            Treats a string as a representation of a URL with Querystring. If the querystring already contains
            an entry for the specified key then its value is changed, otherwise the key/value pair are 
            added. If the string is null then the return value starts with a "?".
            </summary>
    </member>
    <member name="M:Heuristics.Library.Extensions.HttpSessionStateExtensions.Get``1(System.Web.HttpSessionStateBase,System.String)">
      <summary>
            Returns the value at the specified key, cast to the specified type.
            </summary>
    </member>
    <member name="M:Heuristics.Library.Extensions.HttpSessionStateExtensions.Get``1(System.Web.HttpSessionStateBase,System.String,``0)">
      <summary>
            Returns the value at the specified key, or the specified default value if the key is not found or cannot be cast.
            </summary>
    </member>
    <member name="T:Heuristics.Library.Extensions.StringExtensions">
      <summary>
            Extensions that operate on string values, or that treat objects as strings.
            </summary>
    </member>
    <member name="M:Heuristics.Library.Extensions.StringExtensions.CapitalizeFirstLetterOfEachWord(System.String)">
      <summary>
            Returns a new string in which the first letter of each word has been capitalized.
            This is the null-safe functional equivalent to HSString.InitCaps().
            </summary>
    </member>
    <member name="M:Heuristics.Library.Extensions.StringExtensions.Chop(System.String,System.Int32)">
      <summary>
            Removes the specified number of characters from the end of a string and returns
            the result. This is similar to Truncate(), except that you specify the number
            of characters to remove rather than the number of characters to keep. 
            
            If the target string is null, or the length is less than the number of characters
            to remove, an empty string is returned.
            </summary>
    </member>
    <member name="M:Heuristics.Library.Extensions.StringExtensions.Chop(System.Text.StringBuilder,System.Int32)">
      <summary>
            Removes the specified number of characters from the end of a StringBuilder.
            This is similar to Truncate(), except that you specify the number of characters 
            to remove rather than the number of characters to keep. 
            
            If the target StringBuilder is null then nothing happens. If the length of the string
            is less than the number of characters to remove, the builder is cleared.
            </summary>
    </member>
    <member name="M:Heuristics.Library.Extensions.StringExtensions.ContainsIgnoringCase(System.String,System.String)">
      <summary>
            Returns TRUE if the string contains the specified target, using a case-insensitive 
            Contains() operation.
            </summary>
    </member>
    <member name="M:Heuristics.Library.Extensions.StringExtensions.EqualsIgnoringCase(System.String,System.String)">
      <summary>
            Returns TRUE if the two strings are equal, ignoring case.
            </summary>
    </member>
    <member name="M:Heuristics.Library.Extensions.StringExtensions.EndsWithIgnoringCase(System.String,System.String)">
      <summary>
            Null safe version of EndsWith(). Performs a case-insensitive comparison in the current culture.
            </summary>
    </member>
    <member name="M:Heuristics.Library.Extensions.StringExtensions.IfNullOrEmpty(System.String,System.String)">
      <summary>
            If the string instance is not null or empty then it is returned. Otherwise, the specified
            alternate string is returned.
            </summary>
    </member>
    <member name="M:Heuristics.Library.Extensions.StringExtensions.IsNullOrEmpty(System.String)">
      <summary>
            Returns TRUE if the string instance is null or refers to an empty string.
            </summary>
    </member>
    <member name="M:Heuristics.Library.Extensions.StringExtensions.IsNotNullOrEmpty(System.String)">
      <summary>
            Returns TRUE if the string instance is not null AND is not a zero length string.
            </summary>
    </member>
    <member name="M:Heuristics.Library.Extensions.StringExtensions.IsValidDate(System.String)">
      <summary>
            Return TRUE if the string instance contains a valid date representation with no time component.
            This is a wrapper around the HS Validator component.
            </summary>
    </member>
    <member name="M:Heuristics.Library.Extensions.StringExtensions.IsValidDateTime(System.String)">
      <summary>
            Return TRUE if the string instance can be converted to a valid date and/or datetime. Returns
            FALSE otherwise. This is a wrapper around DateTime.TryParse().
            </summary>
    </member>
    <member name="M:Heuristics.Library.Extensions.StringExtensions.Left(System.String,System.Int32)">
      <summary>
            Returns the specified number of characters, starting at the left of the string. This
            is just a null-safe syntactic sugar for p_value.Substring(0, length).
            </summary>
    </member>
    <member name="M:Heuristics.Library.Extensions.StringExtensions.MakeStartWith(System.String,System.String)">
      <summary>
            Makes sure the string begins with the specified substring, adding it if necessary.
            </summary>
    </member>
    <member name="M:Heuristics.Library.Extensions.StringExtensions.MakeEndWith(System.String,System.String)">
      <summary>
            Makes sure the string ends with the specified substring, adding it if necessary.
            </summary>
    </member>
    <member name="M:Heuristics.Library.Extensions.StringExtensions.RemoveLeading(System.String,System.String)">
      <summary>
            Removes the specified characters from the front of a string, if they exist. 
            </summary>
    </member>
    <member name="M:Heuristics.Library.Extensions.StringExtensions.RemoveTrailing(System.String,System.String)">
      <summary>
            Removes the specified characters from the end of a string, if they exist. 
            </summary>
    </member>
    <member name="M:Heuristics.Library.Extensions.StringExtensions.Right(System.String,System.Int32)">
      <summary>
            Returns the specified number of characters, starting at the right of the string. 
            </summary>
    </member>
    <member name="M:Heuristics.Library.Extensions.StringExtensions.SkipChars(System.String,System.Int32)">
      <summary>
            Skips the specified number of characters and then returns the rest of the string. 
            </summary>
    </member>
    <member name="M:Heuristics.Library.Extensions.StringExtensions.Split(System.String,System.String)">
      <summary>
            Splits a string into an array using the specified string as the delimiter. This is 
            syntactic sugar for String.Split(), but allows the delimiter to be passed as a string
            instance rather than a character array.
            </summary>
    </member>
    <member name="M:Heuristics.Library.Extensions.StringExtensions.Squeeze(System.String,System.String)">
      <summary>
            Replaces duplicate occurrences of the specified character with a single instance
            of the character. This is a null-safe equivalent to HSString.Squeeze().
            </summary>
    </member>
    <member name="M:Heuristics.Library.Extensions.StringExtensions.StartsWithIgnoringCase(System.String,System.String)">
      <summary>
            Null safe version of StartsWith(). Performs a case-insensitive comparison in the current culture.
            </summary>
    </member>
    <member name="M:Heuristics.Library.Extensions.StringExtensions.ToLowerNullSafe(System.String)">
      <summary>
            Null safe value of .ToLower(). If the value is null, returns an empty string.
            </summary>
    </member>
    <member name="M:Heuristics.Library.Extensions.StringExtensions.ToTuple(System.String,System.String)">
      <summary>
            Parses a string with two delimited values into a tuple containing their values. This is primarily a syntactic
            sugar over the boilerplate code that splits the values on the delimiter and handles the error conditions.
            </summary>
    </member>
    <member name="M:Heuristics.Library.Extensions.StringExtensions.ToUpperNullSafe(System.String)">
      <summary>
            Null safe value of .ToUpper(). If the value is null, returns an empty string.
            </summary>
    </member>
    <member name="M:Heuristics.Library.Extensions.StringExtensions.TrimAndSqueezeWhitespace(System.String)">
      <summary>
            Trims whitespace from the start and end of a string and replaces all sequences of one
            or more embedded whitespace charaters with a single space. The end result of calling
            this function is a string with no leading or trailing spaces, and where all newlines,
            tabs, or whitespace characters have been converted to a space and then squeezed.
            
            If the string is null, returns an empty string.
            </summary>
    </member>
    <member name="M:Heuristics.Library.Extensions.StringExtensions.TrimNullSafe(System.String)">
      <summary>
            Null safe value of .Trim(). If the value is null, returns an empty string.
            </summary>
    </member>
    <member name="M:Heuristics.Library.Extensions.StringExtensions.Truncate(System.String,System.Int32)">
      <summary>
            Truncates the string to a maximum number of characters.
            </summary>
    </member>
    <member name="M:Heuristics.Library.Extensions.StringExtensions.Truncate(System.String,System.Int32,System.String)">
      <summary>
            Truncates the string to a maximum number of characters. If truncation occurred, the specified
            string (such as a set of ellipsis) is appended to the end of the truncated result. Note that
            the resulting string will have length maxCharacters + len(appendIfTruncated).
            </summary>
    </member>
    <member name="M:Heuristics.Library.Extensions.StringExtensions.WordSafeSubstring(System.String,System.Int32,System.Int32)">
      <summary>
            Returns a portion of a string starting at the word closest to the start point. This
            is useful when generating an abstract of a piece of text and we do not want the
            abstract to contain broken words.
            
            This is a null-safe functional equivalent to HSString.WordSafeSubstring()
            </summary>
      <param name="p_string">The string to operate on.</param>
      <param name="p_startIndex">
            	The location in the string to start at. This is a "soft" value, meaning that
            	if the location provided is the middle of a word it will move backwards to find
            	the beginning of that word.
            </param>
      <param name="p_length">
            	The length of the resulting string. This is also a soft value because we cannot
            	guarantee that there will be a combination of words at the location specified
            	that will meet the length requirement. 
            </param>
      <returns>
            	A string representing a portion of the input string. It will never break a word.
            </returns>
    </member>
    <member name="T:Heuristics.Library.DesignByContract.PreconditionException">
      <summary>
            Exception raised when a precondition fails.
            </summary>
    </member>
    <member name="T:Heuristics.Library.DesignByContract.Require">
      <summary>
            Static class for declaring preconditions. These methods should execute regardless
            of preprocessor directives.
            </summary>
    </member>
    <member name="M:Heuristics.Library.DesignByContract.Require.That(System.Boolean)">
      <summary>
            Asserts that the specified precondition is met.
            </summary>
    </member>
    <member name="M:Heuristics.Library.DesignByContract.Require.That(System.Boolean,System.String)">
      <summary>
            Asserts that the specified precondition is met.
            </summary>
    </member>
    <member name="M:Heuristics.Library.DesignByContract.Require.That(System.Boolean,System.String,System.String[])">
      <summary>
            Asserts that the specified precondition is met. Message is treated as a format 
            string that is supplanted with the message data.
            </summary>
    </member>
    <member name="M:Heuristics.Library.DesignByContract.Require.ThatAll``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},System.String)">
      <summary>
            Precondition check - asserts that all items in a collection match the specified condition.
            </summary>
    </member>
    <member name="T:Heuristics.Library.CSV.CSVData">
      <summary>
            Data from a parsed CSV File
            </summary>
    </member>
    <member name="M:Heuristics.Library.CSV.CSVData.AddRow(System.Collections.Generic.IList{System.String})">
      <summary>
            Used to add a row from the parsed file.
            </summary>
    </member>
    <member name="P:Heuristics.Library.CSV.CSVData.Rows">
      <summary>
            Collection of parsed Rows from the CSV File
            Data records start counting with 2 (1 is the header record)
            </summary>
    </member>
    <member name="P:Heuristics.Library.CSV.CSVData.HeaderRow">
      <summary>
            The first line in the CSV file is assumed to contain the header record.
            </summary>
    </member>
    <member name="T:Heuristics.Library.CSV.CSVDataRow">
      <summary>
            Single row of data from a CSV File
            </summary>
    </member>
    <member name="P:Heuristics.Library.CSV.CSVDataRow.Values">
      <summary>
            Values in sequential order
            </summary>
    </member>
    <member name="P:Heuristics.Library.CSV.CSVDataRow.PassedLengthCheck">
      <summary>
            Indicator if during creation the amount of values watched what was expected.
            </summary>
    </member>
    <member name="T:Heuristics.Library.CSV.CSVParser">
      <summary>
            Class used in parsing CSV Files
            </summary>
    </member>
    <member name="T:Heuristics.Library.CSV.CSVParser.Record">
      <summary>
            A record from a parsed line. Used to control multi-line CSV records.
            </summary>
    </member>
    <member name="M:Heuristics.Library.CSV.CSVParser.ReadContents(System.String,System.Boolean)">
      <summary>
            Reads CSV file line by line and parses the CSV data into a CSV Data object
            </summary>
      <param name="p_filePath">Full path of the CSV File.</param>
      <param name="p_keepFile">Indicates whether the file should be kept after it's data is read.</param>
    </member>
    <member name="M:Heuristics.Library.CSV.CSVParser.ReadContents(System.String)">
      <summary>
            Reads CSV file line by line and parses the CSV data into a CSV Data object
            (Removes file after it is processed)
            </summary>
      <param name="p_filePath">Full path of the CSV File.</param>
    </member>
    <member name="M:Heuristics.Library.CSV.CSVParser.Split(System.String,System.String,System.String,System.Boolean,Heuristics.Library.CSV.CSVParser.Record)">
      <summary>
            Parses a line from a CSV File
            </summary>
      <param name="p_line">CSV Line</param>
      <param name="p_delimiter">Usually comma but any delimiter can be used.</param>
      <param name="p_qualifier">Character(s) that denote a complete string within which delimeters are ignored.</param>
      <param name="p_ignoreCase">Ignore the case of the delimeter and qualifier.</param>
      <param name="p_recordSoFar">A Record cantaining the data so far for records that span multiple lines.</param>
      <returns>The split out data. Might not be complete if no matching delimeter was found at the end.</returns>
    </member>
    <member name="M:Heuristics.Library.CSV.CSVParser.CleanUpAfterParsing(System.String,System.String)">
      <summary>
            Cleans up the Value after it's been parsed out of the CSV Line
             - Removes excess dilimeters
             - Removes excess white-space
            </summary>
    </member>
    <member name="M:Heuristics.Library.Biz.BusinessBase.Validate">
      <summary>
            Applies all business rules to the instance.  Adds error
            column and error description to the local validation errors
            store
            </summary>
      <returns>true if errors found, false otherwise</returns>
    </member>
    <member name="M:Heuristics.Library.Biz.BusinessBase.AddError(System.String,System.String)">
      <summary>
            Adds error to the local validation errors store if the
            column does not already have an error.
            </summary>
      <param name="columnName">Column name for which business rule validation
            failed</param>
      <param name="msg">Validation Error Detail for this validation error</param>
    </member>
    <member name="M:Heuristics.Library.Biz.BusinessBase.RemoveError(System.String)">
      <summary>
            Removes the validation error for column from the local validation
            errors store.
            </summary>
      <param name="columnName">Column name for which to remove error</param>
    </member>
    <member name="M:Heuristics.Library.Biz.BusinessBase.OnPropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
      <summary>
            Event handler for the 'PropertyChanged' event.  By default the IsDirty attribute is
            set.
            
            TODO: It doesn't look like this method is being invoked or registered anywhere, so the
            IsDirty flag is not being flipped when a property changes. I've commented out the test
            for this flag. -SPJ
            </summary>
      <param name="sender">
      </param>
      <param name="e">
      </param>
    </member>
    <member name="M:Heuristics.Library.Biz.BusinessBase.Detach">
      <summary>
            Detaches the instance from any data contexts.
            </summary>
    </member>
    <member name="P:Heuristics.Library.Biz.BusinessBase.ValidationErrors">
      <summary>
            Exposes local validation errors store to calling instances
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:Heuristics.Library.Biz.BusinessBase.HasErrors">
      <summary>
            Value exposing if the instance has errors recorded.
            </summary>
      <returns>True if the validation error store is empty, false otherwise</returns>
    </member>
    <member name="P:Heuristics.Library.Biz.BusinessBase.Item(System.String)">
      <summary>
            Default value for instance.  Gives access to the calling instance to specific
            column error values.
            </summary>
      <param name="columnName">Column for which the error code should be returned.</param>
      <returns>Message value corresponding to the column name if validation erros exist,
            empty string otherwise.</returns>
    </member>
    <member name="P:Heuristics.Library.Biz.BusinessBase.Error">
      <summary>
            Default formatted error message
            </summary>
    </member>
    <member name="P:Heuristics.Library.Biz.BusinessBase.IsDirty">
      <summary>
            True if data in this instance has been modified.
            
            DO NOT RELY ON THIS VALUE. It is currently broken, as it seems the OnPropertyChanged
            event handler is not being wired up.  -SPJ
            </summary>
    </member>
    <member name="P:Heuristics.Library.Biz.BusinessBase.IsNew">
      <summary>
            True if instance represents new data that has not been persisted.
            </summary>
    </member>
    <member name="M:Heuristics.Library.Biz.GatewayBase`2.GetNew">
      <summary>
            Default factory method for building new instances of T 
            </summary>
      <returns>A new instance of T</returns>
    </member>
    <member name="M:Heuristics.Library.Biz.GatewayBase`2.GetById(System.Object)">
      <summary>
            Factory method that gets an instance of T where the
            primary key in the Linq to Sql table is Id
            </summary>
      <param name="Id">Primary key of the entity to be retrieved.</param>
      <returns>Returns an instance of T where the primary key is Id, returns an
            empty instance of T otherwise.</returns>
    </member>
    <member name="M:Heuristics.Library.Biz.GatewayBase`2.GetAll">
      <summary>
            Returns a List of T of all entities in the Linq to Sql
            table of type T.
            </summary>
      <returns>A List of T.</returns>
    </member>
    <member name="M:Heuristics.Library.Biz.GatewayBase`2.Delete(`0)">
      <summary>
            Removes instance from table of type T
            </summary>
      <param name="instance">instance to be deleted.</param>
    </member>
    <member name="M:Heuristics.Library.Biz.GatewayBase`2.Save(`0)">
      <summary>
            Persists instance to the Linq to Sql table of type T.
            Manages Create or Update for type T.
            Required TimeStamp for optimistic concurrency issues for update.
            
            instance should be created by GetNew()
            </summary>
      <param name="instance">New or modified instance to be saved.</param>
    </member>
    <member name="M:Heuristics.Library.Biz.GatewayBase`2.Save(`0,`0)">
      <summary>
            Persists instance to the Linq to Sql table of type T.
            Manages Creat or Update for type T.
            Used where no method exists to address optimistic concurrency
            issues.
            
            new instance should be created by GetNew()
            </summary>
      <param name="modifiedInstance">Instance after changes or before initial save.</param>
      <param name="originalInstance">Original instance before changes</param>
    </member>
    <member name="T:Heuristics.Library.FormStateRestorer.FormDataRestoreHandler">
      <summary>
            HttpHandler that handles the restoration of stored form data by rendering a hidden form,
            emitting hidden fields for all saved form data, and then using JavaScript to immediately
            submit the form. This re-creates the saved form post.
            </summary>
    </member>
    <member name="M:Heuristics.Library.FormStateRestorer.FormDataRestoreHandler.ProcessRequest(System.Web.HttpContext)">
      <summary>
            Processes the web request and renders the page with the hidden form, and then deletes the
            cached form data from the storage provider.
            </summary>
    </member>
    <member name="M:Heuristics.Library.FormStateRestorer.FormDataRestoreHandler.RenderResubmitHtmlPage(System.Web.UI.HtmlTextWriter)">
      <summary>
            Renders a page with a hidden form that submits itself via javascript.
            </summary>
    </member>
    <member name="T:Heuristics.Library.FormStateRestorer.FormDataStorageModule">
      <summary>
            Captures the form data and temporarily saves it if the user is submitting form and either the
            user's authentication ticket has expired, or (if optionally configured this way) the ticket
            is still valid but the user's session has been reset.
            </summary>
    </member>
    <member name="M:Heuristics.Library.FormStateRestorer.FormDataStorageModule.Application_BeginRequest(Heuristics.Library.HttpAdapters.IHttpContext)">
      <summary>
            If form contents were previously stored, they are restored. Otherwise, if this is a 
            form post and the user will have to re-login, the form data is stored.
            </summary>
      <remarks>
            BeginRequest is the only point in the request lifecycle where Request.Form is still 
            accessible and not empty.
            </remarks>
    </member>
    <member name="M:Heuristics.Library.FormStateRestorer.FormDataStorageModule.RequestIsForPageThatCanSaveOrRestoreContext(Heuristics.Library.HttpAdapters.IHttpContext)">
      <summary>
            Returns TRUE if the request is for a page that is valid for the save/restore logic,
            FALSE otherwise (e.g. the request is for something like a .axd resource).
            </summary>
    </member>
    <member name="M:Heuristics.Library.FormStateRestorer.FormDataStorageModule.Application_PostMapRequestHandler(Heuristics.Library.HttpAdapters.IHttpContext)">
      <summary>
            If form contents were previously stored, they are retrieved and passed to the custom
            HttpHandler that resubmits them.
            </summary>
    </member>
    <member name="M:Heuristics.Library.FormStateRestorer.FormDataStorageModule.Application_AcquireRequestState(Heuristics.Library.HttpAdapters.IHttpContext)">
      <summary>
            If the session expires or is reset before the Forms Auth ticket expires, and the
            application is configured to force a new login in this scenario, then the form data
            is saved and the user is redirected to the login page. Otherwise, nothing happens.
            </summary>
    </member>
    <member name="M:Heuristics.Library.FormStateRestorer.FormDataStorageModule.GetFormsAuthLoginUrl">
      <summary>
            Returns the web page portion of the Forms Authentication login URL, minus any URL params.
            </summary>
    </member>
    <member name="M:Heuristics.Library.FormStateRestorer.FormDataStorageModule.GetFormDataFromRequestScope(Heuristics.Library.HttpAdapters.IHttpContext)">
      <summary>
            Returns the FormData object from the context's request scope, or NULL if not found.
            </summary>
    </member>
    <member name="M:Heuristics.Library.FormStateRestorer.FormDataStorageModule.HasStoredData(Heuristics.Library.HttpAdapters.IHttpContext)">
      <summary>
            Returns TRUE if there is stored form data for this request (i.e. there is a cookie
            containing a form data ID that resolves to a stored FormData object).
            </summary>
    </member>
    <member name="M:Heuristics.Library.FormStateRestorer.FormDataStorageModule.HasValidFormsAuthTicket(Heuristics.Library.HttpAdapters.IHttpContext)">
      <summary>
            Returns TRUE if the request contains a valid, non-expired Forms Authentication ticket.
            </summary>
    </member>
    <member name="M:Heuristics.Library.FormStateRestorer.FormDataStorageModule.IsRequestForLoginPage(Heuristics.Library.HttpAdapters.IHttpContext)">
      <summary>
            Returns TRUE if the request is for the login page, FALSE otherwise.
            </summary>
    </member>
    <member name="M:Heuristics.Library.FormStateRestorer.FormDataStorageModule.IsPost(Heuristics.Library.HttpAdapters.IHttpContext)">
      <summary>
            Returns TRUE if the request is an HTTP POST.
            </summary>
    </member>
    <member name="M:Heuristics.Library.FormStateRestorer.FormDataStorageModule.RequestAllowsAnonymousAccess(Heuristics.Library.HttpAdapters.IHttpContext)">
      <summary>
            Returns TRUE if the request is for a resource that accepts anonymous access and
            would therefore not cause a login redirect.
            </summary>
    </member>
    <member name="M:Heuristics.Library.FormStateRestorer.FormDataStorageModule.RequestWillCauseLoginAndNeedsFormStorage(Heuristics.Library.HttpAdapters.IHttpContext)">
      <summary>
            Returns TRUE if this is a POST request to a non-login page that will result in a 
            redirect to the login page, and therefore needs the form data to be stored.
            </summary>
    </member>
    <member name="M:Heuristics.Library.FormStateRestorer.FormDataStorageModule.RestorePreviousFormDataToRequestScope(Heuristics.Library.HttpAdapters.IHttpContext)">
      <summary>
            If the FSR cookie exists and refers to stored form data for the specified request, 
            then the data is retrieved and loaded into the request scope, and TRUE is returned.
            In all other cases, FALSE is returned and no data is restored. 
            </summary>
    </member>
    <member name="M:Heuristics.Library.FormStateRestorer.FormDataStorageModule.RestoreSavedFormPost(Heuristics.Library.HttpAdapters.IHttpContext)">
      <summary>
            If the FSR cookie exists and refers to stored form data for the specified request, 
            then the data is retrieved and loaded into the request scope, and TRUE is returned.
            In all other cases, FALSE is returned and no data is restored. 
            </summary>
    </member>
    <member name="M:Heuristics.Library.FormStateRestorer.FormDataStorageModule.RestoreUploadedFiles(Heuristics.Library.HttpAdapters.IHttpContext)">
      <summary>
            Checks to see if the request being handled is a request from the FormDataRestoreHandler.
            If so, then any cached HttpPostedFile data is restored to the form post and returns TRUE. 
            Otherwise, returns FALSE.
            </summary>
    </member>
    <member name="M:Heuristics.Library.FormStateRestorer.FormDataStorageModule.SessionHasExpired(Heuristics.Library.HttpAdapters.IHttpContext)">
      <summary>
            Returns TRUE if the request is authenticated but has an expired or reset Session object.
            Some applications might be configured to force a relogin in this scenario.
            </summary>
    </member>
    <member name="M:Heuristics.Library.FormStateRestorer.FormDataStorageModule.StoreFormData(Heuristics.Library.HttpAdapters.IHttpContext)">
      <summary>
            Stores the form data from the specified context so that it can be restored later.
            </summary>
    </member>
    <member name="M:Heuristics.Library.FormStateRestorer.FormDataStorageModule.Init(System.Web.HttpApplication)">
      <summary>
            Initializes the module, sets up event handlers, etc.
            </summary>
    </member>
    <member name="M:Heuristics.Library.FormStateRestorer.FormDataStorageModule.OnAcquireRequestState(System.Object,System.EventArgs)">
      <summary>
            Event handler, used only to integrate with the ASP.NET event pipeline.
            </summary>
      <param name="sender">The active HttpApplication.</param>
      <param name="e">Not used.</param>
    </member>
    <member name="M:Heuristics.Library.FormStateRestorer.FormDataStorageModule.OnBeginRequest(System.Object,System.EventArgs)">
      <summary>
            Event handler, used only to integrate with the ASP.NET event pipeline.
            </summary>
      <param name="sender">The active HttpApplication.</param>
      <param name="e">Not used.</param>
    </member>
    <member name="M:Heuristics.Library.FormStateRestorer.FormDataStorageModule.OnPostMapRequestHandler(System.Object,System.EventArgs)">
      <summary>
            Event handler, used only to integrate with the ASP.NET event pipeline.
            </summary>
      <param name="sender">The active HttpApplication.</param>
      <param name="e">Not used.</param>
    </member>
    <member name="T:Heuristics.Library.FormStateRestorer.HttpCacheFormDataStorage">
      <summary>
            Provides a mechanism for storing form data in the HTTP cache.
            </summary>
    </member>
    <member name="M:Heuristics.Library.FormStateRestorer.HttpCacheFormDataStorage.Store(Heuristics.Library.FormStateRestorer.Models.FormData)">
      <summary>
            Stores the form data into the HTTP cache object.
            </summary>
    </member>
    <member name="M:Heuristics.Library.FormStateRestorer.HttpCacheFormDataStorage.Retrieve(System.Guid)">
      <summary>
            Retrieves the form data from the HTTP cache, or NULL if not found.
            </summary>
    </member>
    <member name="M:Heuristics.Library.FormStateRestorer.HttpCacheFormDataStorage.Delete(System.Guid)">
      <summary>
            Deletes the specified form data from the HTTP cache.
            </summary>
    </member>
    <member name="M:Heuristics.Library.FormStateRestorer.HttpCacheFormDataStorage.IsStored(System.Guid)">
      <summary>
            Returns TRUE if form data for the specified ID is stored in the cache, FALSE otherwise.
            </summary>
    </member>
    <member name="T:Heuristics.Library.FormStateRestorer.HttpCachePostedFileStorage">
      <summary>
            Provides a mechanism for storing uploaded files in the HTTP cache while the user is being
            re-authenticated.
            </summary>
    </member>
    <member name="M:Heuristics.Library.FormStateRestorer.HttpCachePostedFileStorage.Store(System.Web.HttpFileCollectionBase)">
      <summary>
            Stores the file collection in the HTTP cache.
            </summary>
    </member>
    <member name="M:Heuristics.Library.FormStateRestorer.HttpCachePostedFileStorage.Retrieve(System.Guid)">
      <summary>
            Retrieves a file collection from the HTTP cache, or NULL if not found.
            </summary>
    </member>
    <member name="M:Heuristics.Library.FormStateRestorer.HttpCachePostedFileStorage.Delete(System.Guid)">
      <summary>
            Deletes the file collection at the specified key in the HTTP cache.
            </summary>
    </member>
    <member name="M:Heuristics.Library.FormStateRestorer.HttpCachePostedFileStorage.IsStored(System.Guid)">
      <summary>
            Returns TRUE if form data for the specified ID is stored in the cache, FALSE otherwise.
            </summary>
    </member>
    <member name="T:Heuristics.Library.FormStateRestorer.Models.FormData">
      <summary>
            Represents a form post.
            </summary>
    </member>
    <member name="M:Heuristics.Library.FormStateRestorer.Models.FormData.CanBeRestoredFor(Heuristics.Library.HttpAdapters.IHttpContext)">
      <summary>
            Returns TRUE if this form data is for the same resource as the specified request.
            </summary>
    </member>
    <member name="P:Heuristics.Library.FormStateRestorer.Models.FormData.Id">
      <summary>
            Unique ID assigned to this form post. Used as an index into the storage provider.
            </summary>
    </member>
    <member name="P:Heuristics.Library.FormStateRestorer.Models.FormData.FormPostPath">
      <summary>
            The "Path" portion of the URL of the original form post.
            </summary>
    </member>
    <member name="P:Heuristics.Library.FormStateRestorer.Models.FormData.FormValues">
      <summary>
            The form data that was posted.
            </summary>
    </member>
    <member name="P:Heuristics.Library.FormStateRestorer.Models.FormData.Files">
      <summary>
            The files that were uploaded as part of this form post.
            </summary>
    </member>
    <member name="T:Heuristics.Library.FormStateRestorer.Models.FormDataTrackingCookie">
      <summary>
            Helper class for reading and writing the cookie that tracks the ID of the most recently
            stored form post.
            </summary>
    </member>
    <member name="M:Heuristics.Library.FormStateRestorer.Models.FormDataTrackingCookie.Create(Heuristics.Library.FormStateRestorer.Models.FormData,Heuristics.Library.HttpAdapters.IHttpContext)">
      <summary>
            Creates a tracking cookie for the specified form data object and adds it to the
            HttpContext.
            </summary>
    </member>
    <member name="M:Heuristics.Library.FormStateRestorer.Models.FormDataTrackingCookie.Read(Heuristics.Library.HttpAdapters.IHttpContext)">
      <summary>
            Reads the FormStateRestorer cookie from the specified context and returns the form
            data ID found therein, or null if a valid ID was not found.
            </summary>
    </member>
    <member name="T:Heuristics.Library.FormStateRestorer.Interfaces.IFormDataStorageProvider">
      <summary>
            Interface for classes that provide a storage mechanism to save form data until
            the user re-authenticates and it can be restored.
            </summary>
    </member>
    <member name="M:Heuristics.Library.FormStateRestorer.Interfaces.IFormDataStorageProvider.Store(Heuristics.Library.FormStateRestorer.Models.FormData)">
      <summary>
            Persists the specified form data object and returns its ID.
            </summary>
    </member>
    <member name="M:Heuristics.Library.FormStateRestorer.Interfaces.IFormDataStorageProvider.Retrieve(System.Guid)">
      <summary>
            Retrieves the specified form data object, or returns NULL if not found.
            </summary>
    </member>
    <member name="M:Heuristics.Library.FormStateRestorer.Interfaces.IFormDataStorageProvider.Delete(System.Guid)">
      <summary>
            Deletes the specified form data object, or does nothing if the data
            is not found.
            </summary>
    </member>
    <member name="M:Heuristics.Library.FormStateRestorer.Interfaces.IFormDataStorageProvider.IsStored(System.Guid)">
      <summary>
            Returns TRUE if there is stored data for the specified ID, FALSE otherwise.
            </summary>
    </member>
    <member name="T:Heuristics.Library.FormStateRestorer.Interfaces.IPostedFileStorageProvider">
      <summary>
            Interface for classes that provide a storage mechanism to save posted file
            contents until the user re-authenticates and they can be restored.
            </summary>
    </member>
    <member name="M:Heuristics.Library.FormStateRestorer.Interfaces.IPostedFileStorageProvider.Store(System.Web.HttpFileCollectionBase)">
      <summary>
            Persists the specified file collection and returns a GUID that can be used to
            retrieve them.
            </summary>
    </member>
    <member name="M:Heuristics.Library.FormStateRestorer.Interfaces.IPostedFileStorageProvider.Retrieve(System.Guid)">
      <summary>
            Retrieves the file collection stored under the specified ID, or NULL if not found.
            </summary>
    </member>
    <member name="M:Heuristics.Library.FormStateRestorer.Interfaces.IPostedFileStorageProvider.Delete(System.Guid)">
      <summary>
            Deletes the specified file collection, or does nothing if it is not found.
            </summary>
    </member>
    <member name="M:Heuristics.Library.FormStateRestorer.Interfaces.IPostedFileStorageProvider.IsStored(System.Guid)">
      <summary>
            Returns TRUE if there is stored data for the specified ID, FALSE otherwise.
            </summary>
    </member>
  </members>
</doc>