@page
@model DetailsModel
@{
	ViewData["Title"] = "Release Details";
	var releaseNum = Model.ReleaseNumber;
}

@section head {
	<link href="~/app/ReleaseMetrics.css" rel="stylesheet" />
	<link href="~/app/ReleaseDetails/ReleaseDetails.css" rel="stylesheet" />
}

<h1>Release @releaseNum</h1>

<div id="app">
	<div v-bind:class="{ 'row': true, 'loading-overlay-wrapper': true, 'has-loading-overlay': isLoadingRelease }">
		<div class="loading-overlay"></div>

		<div id="ReleaseDetails" class="dim-when-has-overlay">
			<h2>Description</h2>
			<p>{{ release.notes }}</p>

			<h2>Dates</h2>
			<p><b>{{ release.startDate | shortDate }}</b> to <b>{{ release.endDate | shortDate }}</b> (<i>{{ daysInRelease(release) }} days</i>)</p>
		</div>
	</div>

	<div class="row summary-header">
		<div id="Instructions" class="panel panel-info u-loading">
			<div class="panel-body">
				Release metrics can be processed at any time, even while the release is in progress, and will simply overwrite previously compiled metrics. <br /><br />

				<b>To process release metrics:</b>
				<ol>
					<li>If the Work Item count is 0, or if the data in Jira has changed, use the "Refresh Jira Cache" button first</li>
					<li>Use the "Refresh From Mavenlink" button to re-import time entries</li>
					<li>Use the "Validate Time" button to find and fix issues with the time entries</li>
					<li>Use the "Refresh Metrics" button to process the time entries and regenerate the metrics</li>
				</ol>
			</div>
			<div class="panel-footer text-right">
				<div v-bind:class="{ 'footer-counts': true, 'loading-overlay-wrapper': true, 'has-loading-overlay': isLoadingRelease }">
					<div class="loading-overlay"></div>
					<span class="text-muted data-count">
						<b>Work Items (local):</b> {{ release.shippedFeatureAndChorePoints }} points
					</span>
					<span class="text-muted data-count">
						<b>Time Entries (local):</b> {{ release.totalBilledHours }} hours
					</span>
				</div>

				<button type="button" class="btn btn-danger" data-toggle="modal" data-target="#jiraSyncConfirmationModal" :disabled="isLoadingTimeEntries">Refresh Jira Cache</button>
				<button type="button" class="btn btn-danger" data-toggle="modal" data-target="#mavenlinkSyncConfirmationModal" :disabled="isLoadingTimeEntries">Refresh Mavenlink Time</button>
				<button type="button" class="btn btn-primary" v-on:click="validateTimeEntries" :disabled="isLoadingTimeEntries || timeEntries.length == 0" :title="validateTimeButtonTooltip">Validate Time</button>
				<button type="button" class="btn btn-primary" v-on:click="refreshMetrics" :disabled="isLoadingTimeEntries || !timeEntriesValidated" :title="refreshMetricsButtonTooltip">Refresh Metrics</button>
			</div>
		</div>
	</div>

	<h2>Time Entries</h2>

	<form id="FilterForm" class="form-inline" style="margin-bottom: 10px">
		<div class="form-group">
			<input type="text" placeholder="keyword filter" v-model="filterKeyword" />
		</div>
		<div class="form-group" v-if="validationHasBeenPerformed">
			<div class="checkbox">
				<input class="form-check-input" type="radio" id="filterValidationAll" v-model="filterValidation" value="ALL" />
				<label class="form-check-label" for="filterValidationAll">All </label>

				<input class="form-check-input" type="radio" id="filterValidationWarnAndError" v-model="filterValidation" value="WARNINGS_AND_ERRORS" />
				<label class="form-check-label" for="filterValidationWarnAndError">Warnings &amp; Errors </label>

				<input class="form-check-input" type="radio" id="filterValidationErrorsOnly" v-model="filterValidation" value="ERRORS_ONLY" />
				<label class="form-check-label" for="filterValidationErrorsOnly">Errors Only </label>

			</div>
		</div>
	</form>

	<!-- min height is to avoid page resizing when filter removes everything from the list, which is a jarring UX -->
	<div id="TimeEntriesWrapper" v-bind:class="{ 'row': true, 'has-loading-overlay': isLoadingTimeEntries }" style="min-height: 500px">
		<div class="loading-overlay"></div>

		<table class="table time-entry-table dim-when-has-overlay">
			<thead>
				<tr>
					<th scope="col">Project</th>
					<th scope="col">Task</th>
					<th scope="col">Person</th>
					<th scope="col">Minutes</th>
					<th scope="col">Date/Notes</th>
					<th scope="col"></th>
				</tr>
			</thead>
			<tbody>
				<tr v-show="isLoadingTimeEntries">
					<td colspan="6" class="text-center">
						{{ statusMessage }}
					</td>
				</tr>
				<tr v-for="entry in filteredTimeEntries" v-show="!isLoadingTimeEntries" v-bind:class="{ 'ignored-entry': entry.ignore }">
					<th scope="row" class="project-title">{{ entry.projectTitleOverride | truncate(25) }}</th>
					<th scope="row" class="task-title">{{ entry.taskTitleOverride }}</th>
					<td>{{ entry.userName }}</td>
					<td>{{ entry.durationMinutesOverride }}</td>
					<td>
						{{ entry.datePerformed | shortDate }} &nbsp;
						<span class="mavenlinkTimeId">
							(
							{{ entry.id }}
							<i class="fas fa-undo icon-toggle" title="Discard local changes and restore to the original Mavenlink entry" style="color: #ffb2b2" v-show="timeEntryHasLocalChanges(entry)" v-on:click="if (confirm('Revert local changes?')) { revertLocalChanges(entry.id); }"></i>
							)
						</span><br />
						{{ entry.notesOverride }}
						<div v-if="entry.validationErrors.length > 0" class="validation-errors">
							<div v-for="msg in entry.validationErrors" class="validation-error" v-html="'<b>[Error]</b> ' + msg"></div>
						</div>
						<div v-if="entry.validationWarnings.length > 0" class="validation-warnings">
							<div v-for="msg in entry.validationWarnings" class="validation-warning" v-html="'<b>[Warning]</b> ' + msg"></div>
						</div>
					</td>
					<td style="white-space: nowrap">
						<i class="far fa-edit icon-toggle" title="Edit this entry" v-on:click="editTimeEntry(entry.id)"></i>
						<i class="fas fa-ban icon-toggle toggle-ignore-off" title="Ignore this entry when calculating metrics" v-on:click="toggleIgnoredStatus(entry.id)" v-show="!entry.ignore"></i>
						<i class="fas fa-ban icon-toggle toggle-ignore-on" title="Clear the ignored status for this entry" v-on:click="toggleIgnoredStatus(entry.id)" v-show="entry.ignore"></i>
					</td>
				</tr>
			</tbody>
		</table>
	</div>

	<!-- Confirmation modals -->
	<div class="modal fade" id="mavenlinkSyncConfirmationModal" tabindex="-1" role="dialog" aria-labelledby="mavenlinkSyncModalTitle" aria-hidden="true">
		<div class="modal-dialog" role="document">
			<div class="modal-content">
				<div class="modal-header">
					<h3 class="modal-title" id="mavenlinkSyncModalTitle">Import New Time Entries?</h3>
					<button type="button" class="close" data-dismiss="modal" aria-label="Close">
						<span aria-hidden="true">&times;</span>
					</button>
				</div>
				<div class="modal-body">
					<strong>Refreshing the time entries from Mavenlink will <span style="text-decoration: underline">erase</span> all previously computed metrics for this release.</strong> Those
					metrics will be re-created after you re-validate and re-process the newly imported entries.<br /><br />

					If you have made local modifications to the imported time data, those modifications will be retained <b>unless</b> the source record
					has a greater "last modified" timestamp. In that case, your local modifications will be overwritten and the latest data will be
					loaded from the server.<br /><br />

					Any locally-stored time entries for this release that are not found in the latest server payload will be deleted.<br /><br />

					If the Jira data has changed, <b>refresh the work item data first</b> or else the time entries may fail to be correctly allocated to the full set of work items.
				</div>
				<div class="modal-footer">
					<button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
					<button type="button" class="btn btn-danger" data-dismiss="modal" v-on:click="loadTimeFromMavenlink" :disabled="isLoadingTimeEntries">Refresh Mavenlink Time</button>
				</div>
			</div>
		</div>
	</div>

	<div class="modal fade" id="jiraSyncConfirmationModal" tabindex="-1" role="dialog" aria-labelledby="jiraSyncModalTitle" aria-hidden="true">
		<div class="modal-dialog" role="document">
			<div class="modal-content">
				<div class="modal-header">
					<h3 class="modal-title" id="jiraSyncModalTitle">Refresh Jira Stories?</h3>
					<button type="button" class="close" data-dismiss="modal" aria-label="Close">
						<span aria-hidden="true">&times;</span>
					</button>
				</div>
				<div class="modal-body">
					<strong>Refreshing the work item data from Jira will <span style="text-decoration: underline">erase</span> all previously computed metrics for this release.</strong> Those
					metrics will be re-created after you re-validate and re-process the time entries.<br /><br />

					To improve performance, a local cache of Jira data is maintained by this application. This cache needs to be manually refreshed before
					importing time entries that reference that data. Unlike the time entry data, you SHOULD NOT be making any modifications to the locally-stored
					work item data. This data doesn't impact invoicing and can therefore be modified at any time, so if a data issue is found please fix it in the
					source system (Jira) and then refresh the local cache. <br /><br />
				</div>
				<div class="modal-footer">
					<button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
					<button type="button" class="btn btn-danger" data-dismiss="modal" v-on:click="loadWorkItemsFromJira" :disabled="isLoadingTimeEntries">Refresh Jira Cache</button>
				</div>
			</div>
		</div>
	</div>

	<!-- edit time entry modal-->
	<div class="modal fade" id="editTimeEntryModal" tabindex="-1" role="dialog" aria-labelledby="editTimeEntryModalTitle" aria-hidden="true">
		<div class="modal-dialog" role="document">
			<div class="modal-content">
				<div class="modal-header">
					<h3 class="modal-title" id="editTimeEntryModalTitle">Edit Time Entry</h3>
					<button type="button" class="close" data-dismiss="modal" aria-label="Close">
						<span aria-hidden="true">&times;</span>
					</button>
				</div>
				<div class="modal-body">
					<form id="EditTimeEntryForm">
						<input type="hidden" name="timeEntryId" v-bind:value="timeEntryBeingEdited.id" />

						<div class="form-group row">
							<label class="col-sm-2 col-form-label">Id:</label>
							<div class="col-sm-10">
								{{ timeEntryBeingEdited.id }}
								<span class="text-muted" v-show="timeEntryHasLocalChanges(timeEntryBeingEdited)">(time entry has been modified after import)</span>
							</div>
						</div>
						<div class="form-group row">
							<label class="col-sm-2 col-form-label">User:</label>
							<div class="col-sm-10">
								{{ timeEntryBeingEdited.userName }}
							</div>
						</div>
						<div class="form-group row">
							<label class="col-sm-2 col-form-label">Mavenlink Project:</label>
							<div class="col-sm-10">
								{{ timeEntryBeingEdited.projectTitleOverride }}
							</div>
						</div>
						<div class="form-group row">
							<label class="col-sm-2 col-form-label">Mavenlink Task:</label>
							<div class="col-sm-10">
								<input type="text" class="form-control" id="timeEntryTaskTitle" name="taskTitle" v-bind:value="timeEntryBeingEdited.taskTitleOverride" />
							</div>
						</div>
						<div class="form-group row">
							<label for="timeEntryNotes" class="col-sm-2 col-form-label">Notes:</label>
							<div class="col-sm-10">
								<textarea class="form-control" id="timeEntryNotes" name="notes">{{ timeEntryBeingEdited.notesOverride }} </textarea>
							</div>
						</div>
						<div class="form-group row">
							<label for="timeEntryMinutes" class="col-sm-2 col-form-label">Duration:</label>
							<div class="col-sm-10">
								<div class="input-group">
									<input type="text" style="width:50px" maxlength="3" class="form-control" id="timeEntryMinutes" name="duration" v-bind:value="timeEntryBeingEdited.durationMinutesOverride" />
									<span id="timeEntryHelpText" class="form-text text-muted">
										minutes
									</span>
								</div>
							</div>
						</div>
					</form>
				</div>
				<div class="modal-footer">
					<button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
					<button type="button" class="btn btn-danger" data-dismiss="modal" v-on:click="saveTimeEntryChanges" :disabled="isLoadingTimeEntries">Save</button>
				</div>
			</div>
		</div>
	</div>

	<!-- API error message modal -->
	<div class="modal fade" id="messageModal" tabindex="-1" role="dialog" aria-labelledby="messageModalTitle" aria-hidden="true">
		<div class="modal-dialog" role="document">
			<div class="modal-content">
				<div class="modal-header">
					<h3 class="modal-title" id="messageModalTitle">Notice</h3>
					<button type="button" class="close" data-dismiss="modal" aria-label="Close">
						<span aria-hidden="true">&times;</span>
					</button>
				</div>
				<div class="modal-body">
					<ul>
						<li v-for="msg in messageModalContents">
							<b>{{ msg.type }}</b>: {{ msg.message }}
						</li>
					</ul>
				</div>
				<div class="modal-footer">
					<button type="button" class="btn btn-primary" data-dismiss="modal">Ok</button>
				</div>
			</div>
		</div>
	</div>
</div>

<script>
	var vueApp = new Vue({
		el: '#app',
		data: {
			// details about the release, including metric summary
			release: {},

			// is TRUE when the release data is being loaded, FALSE otherwise. Triggers the spinner overlay.
			isLoadingRelease: true,

			// is TRUE when the time data is being loaded, FALSE otherwise. Triggers the spinner overlay and shows the status message
			isLoadingTimeEntries: true,
			statusMessage: '... loading ...',

			// array of ResultMsg messages to display in a modal. (See .showMessageModal())
			messageModalContents: [],

			// time entries associated with the release
			timeEntries: [],

			// the specific time entry currently being edited
			timeEntryBeingEdited: {},

			// has validation been performed? Used to trigger certain UI elements that don't make sense otherwise
			validationHasBeenPerformed: false,

			// are all of the validation errors resolved?
			timeEntriesValidated: false,

			// filters for the data grid
			filterKeyword: '',
			filterValidation: 'ALL'
		},

		mounted() {
			this.refreshReleaseDetails();
			this.refreshTimeEntryGrid();
		},

		computed: {
			filteredTimeEntries: function () {
				var app = this;

				var keywordFilter = this.filterKeyword.trim();
				var hasKeywordFilter = keywordFilter !== '';
				var hasValidationFilter = this.filterValidation === 'WARNINGS_AND_ERRORS' || this.filterValidation === 'ERRORS_ONLY';

				return this.timeEntries.filter(function (t) {
					// short circuit if no filters applied
					if (!hasKeywordFilter && !hasValidationFilter)
						return true;

					// exit if fail keyword check
					if (hasKeywordFilter) {
						var searchableText = t.id + ' ' + t.projectTitle + ' ' + t.taskTitle + ' ' + t.userName + ' ' + t.notes;

						if (searchableText.indexOfIgnoreCase(keywordFilter) === -1) {
							return false;
						}
					}

					// exit if fail validation check
					if (hasValidationFilter) {
						switch (app.filterValidation) {
							case 'WARNINGS_AND_ERRORS':
								if (t.validationWarnings.length === 0 && t.validationErrors.length === 0)
									return false;
								break;

							case 'ERRORS_ONLY':
								if (t.validationErrors.length === 0)
									return false;
								break;

							default:
								console.log('ERROR: Should not get here w/ validation filter "' + app.filterValidation + '"');
								return false;
								break;
						}
					}

					// only get here if all filters passed
					return true;
				});
			},

			refreshMetricsButtonTooltip: function () {
				return (this.timeEntriesValidated)
					? 'Re-process all time entries and regenerate the metrics'
					: 'You must successfully validate the time entries before you can process them';
			},

			validateTimeButtonTooltip: function () {
				return (this.timeEntries.length > 0)
					? 'Check time data for consistency issues'
					: 'No time entries have been imported yet';
			},
		},

		methods: {
			// Given the time entry array, extends it with the validation properties that are populated when the data are validated
			addValidationProperties: function (dataArray) {
				for (var i = 0; i < dataArray.length; i++) {
					Vue.set(dataArray[i], 'validationErrors', '');
					Vue.set(dataArray[i], 'validationWarnings', '');
				}
			},

			// Calculates the number of days in the release
			daysInRelease: function (release) {
				var start = moment(release.startDate);
				var end = moment(release.endDate);
				return end.diff(start, "days");
			},

			// Launches a modal for editing a time entry
			editTimeEntry: function (timeEntryId) {
				this.timeEntryBeingEdited = this.getTimeEntry(timeEntryId);

				if (!this.timeEntryBeingEdited) {
					console.log("Time entry " + timeEntryId + " was not found");
				}

				$("#editTimeEntryModal").modal("show");
			},

			// Returns the time entry matching the specified ID
			getTimeEntry: function (timeEntryId) {
				var matches = jQuery.grep(this.$data.timeEntries, function (t) {
					return t.id === timeEntryId;
				});

				return (matches.length === 1)
					? matches[0]
					: null;
			},

			// Synchronizes time entries in the local database by reloading all time for this release from Mavenlink
			loadTimeFromMavenlink: function () {
				this.isLoadingTimeEntries = true;
				this.statusMessage = '... fetching time from MavenLink ...';
				$("#mavenlinkSyncConfirmationModal").modal("hide");

				axios
					.post('/api/TimeEntries/LoadTimeFromMavenlink?releaseNum=@releaseNum')
					.then(response => {
						this.statusMessage = '... refreshing page ...';
						this.addValidationProperties(response.data);
						this.$data.timeEntries = response.data;
						this.refreshReleaseDetails();
						this.$data.isLoadingTimeEntries = false;
					});
			},

			// Synchronizes the local work item cache (for work items associated with this release) with the Jira API
			loadWorkItemsFromJira: function () {
				this.isLoadingTimeEntries = true;
				this.statusMessage = '... refreshing work items ...';
				$("#jiraSyncConfirmationModal").modal("hide");

				var app = this;

				axios
					.post('/api/WorkItems/RefreshJiraCacheForRelease?releaseNum=@releaseNum')
					.then(response => {
						if (response.data.messages.length > 0) {
							this.showMessageModal(response.data.messages);
						}

						this.statusMessage = '... updating work item time allocation ...';
						return axios.post('/api/TimeEntries/RefreshWorkItemTimeAllocation?releaseNum=@releaseNum');
					})
					.then(response => {
						this.statusMessage = '... refreshing page data ...';
						app.refreshReleaseDetails();
						app.refreshTimeEntryGrid();
					});
			},

			// Calls the server to reload the Release data shown at the top of the page
			refreshReleaseDetails: function () {
				this.isLoadingRelease = true;
				this.statusMessage = '... refreshing release summary ...';

				axios
					.get('/api/Releases/Get?releaseNum=@releaseNum')
					.then(response => {
						this.release = response.data;
						this.isLoadingRelease = false;
					});
			},

			// Refreshes the local TimeEntry list with a new TimeEntry received
			// from the server
			refreshTimeEntry: function (newEntry) {
				var matchesId = function (el, idx, array) {
					return el.id === newEntry.id;
				};

				var index = this.$data.timeEntries.findIndex(matchesId);
				if (index < 0) {
					console.log('ERROR: TimeEntry "' + newEntry.id + '" not found');
				}

				// HACK: Would prefer to use Vue.set() to just replace the model with
				// the new entry, but kept getting JS errors when Vue tried to re-render
				// afterwards. Don't know why, couldn't figure it out, giving up for now
				this.$data.timeEntries[index].taskTitleOverride = newEntry.taskTitleOverride;
				this.$data.timeEntries[index].durationMinutesOverride = newEntry.durationMinutesOverride;
				this.$data.timeEntries[index].notesOverride = newEntry.notesOverride;
				this.$data.timeEntries[index].locallyUpdatedAt = newEntry.locallyUpdatedAt;
			},

			// Resets a time entry to the original Mavenlink data
			revertLocalChanges: function (timeEntryId) {
				axios
					.post('/api/TimeEntries/RevertToOriginal?timeEntryId=' + timeEntryId)
					.then(response => {
						this.refreshTimeEntry(response.data);
						this.timeEntryBeingEdited = {};
						this.$data.timeEntriesValidated = false;
					});
			},

			// Calls the server to obtain local time entries and refreshes the data grid
			refreshTimeEntryGrid: function () {
				this.isLoadingTimeEntries = true;
				this.statusMessage = '... getting locally stored time entries ...';

				axios
					.get('/api/TimeEntries/GetForRelease?releaseNum=@releaseNum')
					.then(response => {
						this.isLoadingTimeEntries = false;
						this.addValidationProperties(response.data);
						this.timeEntries = response.data;
					});
			},

			// AJAX post to save changes made to the Edit Time Entry form
			saveTimeEntryChanges: function () {
				var data = $("#EditTimeEntryForm").serializeFormJSON();

				axios
					.post('/api/TimeEntries/Update', data)
					.then(response => {
						this.refreshTimeEntry(response.data);
						this.timeEntryBeingEdited = {};
						this.$data.timeEntriesValidated = false;
					});
			},

			// Displays a modal alert containing a list of API call result messages
			showMessageModal: function (errorArray) {
				this.messageModalContents = errorArray;
				$("#messageModal").modal("show");
			},

			// Returns TRUE if the time entry has local overrides for this entry
			timeEntryHasLocalChanges: function (timeEntry) {
				var updated = moment(timeEntry.locallyUpdatedAt);
				var created = moment(timeEntry.locallyCreatedAt);
				return updated.diff(created, "seconds") > 0;
			},

			// Calls an API to toggle the 'ignored' property for the specified entry
			toggleIgnoredStatus: function (timeEntryId) {
				var entry = this.getTimeEntry(timeEntryId);
				if (!entry) {
					console.log("Entry " + timeEntryId + " was not found");
				}

				var newFlag = !entry.ignore;

				axios
					.post('/api/TimeEntries/SetIgnoredStatus?timeEntryId=' + timeEntryId + '&ignored=' + newFlag)
					.then(response => {
						entry.ignore = newFlag;
					})
			},

			// Runs the current data through the validation process and updates the view, showing the validation results
			// and enabling the "refreshMetrics" button
			validateTimeEntries: function () {
				this.isLoadingTimeEntries = true;
				this.statusMessage = '... validating ...';

				var vm = this;

				this.$data.timeEntries.forEach(function (el) {
					el.validationErrors = [];
					el.validationWarnings = [];
				});

				axios
					.get('/api/TimeEntries/ValidateEntriesForRelease?releaseNum=@releaseNum')
					.then(response => {
						this.statusMessage = '... displaying results ...';

						var payload = response.data;

						var hasErrors = false;

						for (var i = 0; i < payload.length; i++) {
							var thisResult = payload[i];
							var thisTimeEntry = vm.getTimeEntry(thisResult.timeEntryId);

							if (thisTimeEntry === null) {
								console.log("Couldn't find time entry %s", thisResult.timeEntryId);
							}

							thisTimeEntry.validationErrors = thisResult.errors;
							thisTimeEntry.validationWarnings = thisResult.warnings;

							hasErrors = hasErrors || (thisResult.errors.length > 0);
						}

						this.$data.isLoadingTimeEntries = false;
						this.$data.validationHasBeenPerformed = true;
						this.$data.timeEntriesValidated = !hasErrors;
						this.$data.filterValidation = 'WARNINGS_AND_ERRORS';
					});
			},

			// Converts the local time entries into the standardized schema that is used by the metric calculations
			refreshMetrics: function () {
				alert("not implemented yet");

			}
		},

		// TODO: share filters globally
		filters: {
			shortDate: function (date) {
				return moment(date).format('YYYY-MM-DD');
			},

			truncate: function (s, max) {
				return (s.length <= max)
					? s
					: s.substring(0, max - 1) + '...';
			}
		}
    });
</script>


