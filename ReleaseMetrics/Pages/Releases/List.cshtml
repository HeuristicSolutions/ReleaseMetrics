@page
@{
	ViewData["Title"] = "Release List";
}
@section head {
	<link href="~/app/ReleaseMetrics.css" rel="stylesheet" />
}

<style type="text/css">
	tr.release-top td {
		border-bottom: none !important
	}

	tr.release-bottom td {
		border-top: none !important
	}

	.release-loading-message { color: red; }
</style>

<div id="app">
	<h1>Releases</h1>

	<div class="row summary-header">
		<div class="panel panel-info">
			<div class="panel-body">
				Release metrics are cached locally and are based on analysis of locally-stored data. They are not automatically updated to reflect
				changes in Jira or Mavenlink. If the source data changes, re-generate the release metrics.<br /><br />
				Storing the data locally makes it easier to make corrections to data, specifically the time entries, that could be difficult to
				push back into Mavenlink after-the-fact.
			</div>
			<div class="panel-footer text-right">
				<button type="button" class="btn btn-primary" data-toggle="modal" data-target="#NewReleaseModal">Add Release</button>
			</div>
		</div>
	</div>

	<div class="row">
		<table class="table">
			<thead>
				<tr>
					<th scope="col">Release</th>
					<th scope="col">Duration</th>
					<th scope="col">Shipped<br />Points</th>
					<th scope="col">Billed<br />Hours</th>
					<th scope="col">Hrs / Pt</th>
					<th scope="col">"Fully Loaded"<br />Hrs / Pt</th>
					<th scope="col"></th>
				</tr>
			</thead>
			<tbody>
				<tr v-if="isInitialized === false">
					<td colspan="7" class="text-center">
						... loading ...
					</td>
				</tr>
				<template v-for="release in releases" v-bind:key="release">
					<tr class="release-top">
						<th scope="row" rowspan="2">{{ release.releaseNumber }}</th>
						<td class="text-nowrap">
							<b>{{ release.weeksInRelease }} weeks</b> ({{ release.startDate | shortDate }} - {{ release.endDate | shortDate }})
						</td>
						<td>
							{{ release.shippedFeatureAndChorePoints }}
							<i class="fas fa-sync icon-toggle" title="Reload all Jira data for this release into the local cache" style="color: #ffb2b2" data-toggle="modal" data-target="#jiraSyncConfirmationModal" v-on:click="jiraRefreshConfirmationRelease = release.releaseNumber"></i>
						</td>
						<td>{{ release.totalBilledHours }}</td>
						<td>{{ release.avgHoursPerFeatureAndChorePoint | hoursPerPt }}</td>
						<td>{{ release.fullyLoadedAvgHoursPerPoint | hoursPerPt }}</td>
						<td>
							<a v-bind:href="'/Releases/Details?releaseNum=' + release.releaseNumber" class="btn btn-primary">View</a>
						</td>
					</tr>
					<tr class="release-bottom">
						<td colspan="6">
							<div v-show="release.loadingMessage == ''">
								{{ release.notes }}
							</div>
							<div v-show="release.loadingMessage != ''" class="release-loading-message">
								... {{ release.loadingMessage }} ...
							</div>
						</td>
					</tr>
				</template>
			</tbody>
		</table>
	</div>

	<!-- jira refresh confirmation modal -->
	<div class="modal fade" id="jiraSyncConfirmationModal" tabindex="-1" role="dialog" aria-labelledby="jiraSyncModalTitle" aria-hidden="true">
		<div class="modal-dialog" role="document">
			<div class="modal-content">
				<div class="modal-header">
					<h3 class="modal-title" id="jiraSyncModalTitle">Refresh Jira Stories for {{ jiraRefreshConfirmationRelease }}?</h3>
					<button type="button" class="close" data-dismiss="modal" aria-label="Close">
						<span aria-hidden="true">&times;</span>
					</button>
				</div>
				<div class="modal-body">
					To improve performance, Jira data is cached in a local database. If data in Jira has changed, the local cache should be manually updated BEFORE you process
					time entries for that release.<br/><br/>
					Unlike the time entry data, you SHOULD NOT be making any modifications to the locally-stored work item data. This data doesn't impact 
					invoicing and can therefore be modified at any time, so if a data issue is found please fix it in the source system (Jira) 
					and then refresh the local cache. <br /><br />
					<b>This will also re-calculate the Work Item Time Allocations</b>, which may take a few moments if there are lots of time entries.
				</div>
				<div class="modal-footer">
					<button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
					<button type="button" class="btn btn-danger" data-dismiss="modal" v-on:click="loadWorkItemsFromJira" :disabled="!isInitialized">Refresh Jira Cache</button>
				</div>
			</div>
		</div>
	</div>
</div>

<!-- modal for creating a new release -->
<div class="modal fade" id="NewReleaseModal" tabindex="-1" role="dialog">
	<div class="modal-dialog" role="document">
		<div class="modal-content">
			<div class="modal-header">
				<h5 class="modal-title">New Release</h5>
				<button type="button" class="close" data-dismiss="modal" aria-label="Close">
					<span aria-hidden="true">&times;</span>
				</button>
			</div>
			<div class="modal-body">
				<p><b>Not implemented yet</b></p>
				<p>To add a release, add it directly to the database.</p>
			</div>
			<div class="modal-footer">
				<button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
			</div>
		</div>
	</div>
</div>

<script>
	var vueApp = new Vue({
		el: '#app',

		data: {
			isInitialized: false,

			// an array of ReleaseSummary objects, with additional props:
			//	.loadingMessage = if not empty, then it indicates the release is being refreshed. The message is displayed over the row.
			releases: [],

			// which release is the "confirm jira refresh" modal being shown for?
			jiraRefreshConfirmationRelease: null,

			// validation messages displayed in a modal
			messageModalContents: [],
		},

		mounted() {
			this.refreshReleaseGrid();
		},

		methods: {

			// returns the release from the local view model with the specified id
			getRelease: function (releaseNum) {
				var matches = jQuery.grep(this.$data.releases, function (r) {
					return r.releaseNumber === releaseNum;
				});

				return (matches.length === 1)
					? matches[0]
					: null;
			},

			// Synchronizes the local work item cache (for work items associated with this release) with the Jira API
			loadWorkItemsFromJira: function () {
				var app = this;

				var releaseNum = app.jiraRefreshConfirmationRelease;
				var release = app.getRelease(releaseNum);

				release.loadingMessage = 'refreshing local Jira work item cache';

				axios
					.post('/api/WorkItems/RefreshJiraCacheForRelease?releaseNum=' + releaseNum)
					.then(response => {
						if (response.data.messages.length > 0) {
							alert("messages found, but this page doesn't know how to show them yet");
						}

						release.loadingMessage = 'updating work item time allocation';
						return axios.post('/api/TimeEntries/RefreshWorkItemTimeAllocation?releaseNum=' + releaseNum);
					})
					.then(response => {
						release.loadingMessage = 'refreshing';
						app.refreshReleaseGrid();
					});
			},

			refreshReleaseGrid: function () {
				var app = this;

				app.isInitialized = false;

				axios
					.get("/api/Releases/List")
					.then(response => {
						for (var i = 0; i < response.data.length; i++) {
							Vue.set(response.data[i], 'loadingMessage', '');
						}
						app.releases = response.data;
						app.isInitialized = true;
					});
			}
		},

		filters: {
			shortDate: function (date) {
				return moment(date).format('YYYY-MM-DD');
			},

			hoursPerPt: function (decimalHrsPerPt) {
				return parseFloat(Math.round(decimalHrsPerPt * 100) / 100).toFixed(2);
			}
		}
	});
</script>


