@page
@{
	ViewData["Title"] = "Release List";
}
@section head {
	<link href="~/app/ReleaseMetrics.css" rel="stylesheet" />
}

<style type="text/css">
	tr.release-top td {
		border-bottom: none !important
	}

	tr.release-bottom td {
		border-top: none !important
	}

	.release-loading-message { color: red; }
	.release-duration { font-weight: normal; color: silver; }
	.release-icons { padding-top: 10px; }
</style>

<div id="app">
	<h1>Releases</h1>

	<div class="row summary-header">
		<div class="panel panel-info">
			<div class="panel-body">
				Release metrics are calculated dynamically based on the <b>locally-stored</b> Jira and Mavenlink data. If data in the source system(s) changes,
				you will need to refresh the local cache before the metrics will update.<br /><br />
			</div>
			<div class="panel-footer text-right">
				<button type="button" class="btn btn-primary" data-toggle="modal" data-target="#NewReleaseModal">Add Release</button>
			</div>
		</div>
	</div>

	<span class="row">
		<table class="table">
			<thead>
				<tr>
					<th scope="col" rowspan="2">Release</th>
					<th scope="col" colspan="3">Shipped Stories</th>
					<th scope="col" colspan="2">Not Shipped</th>
					<th scope="col" colspan="2">Defects</th>
					<th scope="col" rowspan="2">"Fully Loaded"<br />Hrs / Pt</th>
					<th scope="col" rowspan="2"></th>
				</tr>
				<tr>
					<th scope="col">Points</th>
					<th scope="col">Hours</th>
					<th scope="col">Hrs / Pt</th>
					<th scope="col">Unused<br />Contingency</th>
					<th scope="col">Hours</th>
					<th scope="col">Legacy<br />Count</th>
					<th scope="col">Legacy<br />Hours</th>
				</tr>
			</thead>
			<tbody>
				<tr v-if="isInitialized === false">
					<td colspan="9" class="text-center">
						... loading ...
					</td>
				</tr>
				<template v-for="release in releases" v-bind:key="release">
					<tr class="release-top">
						<th scope="row" rowspan="2">
							{{ release.releaseNumber }}
							<div class="text-nowrap release-icons">
								<i class="fas fa-sync icon-toggle" title="Complete re-load all Jira and Mavenlink data for this release" style="color: #ffb2b2" data-toggle="modal" data-target="#syncEverythingConfirmationModal" v-on:click="releaseNumForConfirmationModal = release.releaseNumber"></i>
								<i class="fas fa-check-double icon-toggle" title="Check for validation errors in the time entry data for this release" style="color: #6d99ff" data-toggle="modal" data-target="#validateReleaseConfirmationModal" v-on:click="releaseNumForConfirmationModal = release.releaseNumber"></i>
							</div>
						</th>
						<td>
							{{ release.shippedFeatureAndChorePoints }}
							<i class="fas fa-sync icon-toggle" title="Reload all Jira data for this release into the local cache" style="color: #ffb2b2" data-toggle="modal" data-target="#jiraSyncConfirmationModal" v-on:click="releaseNumForConfirmationModal = release.releaseNumber"></i>
						</td>
						<td>
							{{ release.shippedFeatureAndChoreHours | twoDecimalPts }}
							<i class="fas fa-sync icon-toggle" title="Reload all Mavenlink data for this release into the local cache" style="color: #ffb2b2" data-toggle="modal" data-target="#mavenlinkSyncConfirmationModal" v-on:click="alert('Not implemented')"></i>
						</td>
						<td><b>{{ release.avgHoursPerFeatureAndChorePoint | twoDecimalPts }}</b></td>
						<td>TODO</td>
						<td>{{ release.unshippedHours | twoDecimalPts }}</td>
						<td>{{ release.legacyDefectCount}} </td>
						<td>{{ release.legacyDefectHours | twoDecimalPts }}</td>
						<td><b>{{ release.fullyLoadedAvgHoursPerPoint | twoDecimalPts }}</b></td>
						<td rowspan="2">
							<a v-bind:href="'/Releases/Details?releaseNum=' + release.releaseNumber" class="btn btn-primary">View</a>
						</td>
					</tr>
					<tr class="release-bottom">
						<td colspan="7">
							<div v-show="release.loadingMessage == ''">
								{{ release.startDate | shortDate }} - {{ release.endDate | shortDate }}
								&nbsp;&nbsp;<span class="release-duration">{{ release.weeksInRelease }} weeks</span>
								<br />
								{{ release.notes }}
							</div>
							<div v-show="release.loadingMessage != ''" class="release-loading-message">
								... {{ release.loadingMessage }} ...
							</div>
						</td>
					</tr>
				</template>
			</tbody>
		</table>
	</div>

	<!-- refresh everything confirmation modal -->
	<div class="modal fade" id="syncEverythingConfirmationModal" tabindex="-1" role="dialog" aria-labelledby="syncEverythingModalTitle" aria-hidden="true">
		<div class="modal-dialog" role="document">
			<div class="modal-content">
				<div class="modal-header">
					<h3 class="modal-title" id="syncEverythingModalTitle">Refresh ALL data for {{ releaseNumForConfirmationModal }}?</h3>
					<button type="button" class="close" data-dismiss="modal" aria-label="Close">
						<span aria-hidden="true">&times;</span>
					</button>
				</div>
				<div class="modal-body">
					This will:
					<ol>
						<li>Delete (from the local database) and re-load all Jira work items for the release</li>
						<li>Delete (from the local database) all Time Entry Work Allocation records for the release</li>
						<li>Re-sync the local Mavenlink database, which will reload all Mavenlink time entries <i>unless</i> there are local changes newer than the server record</li>
						<li>Re-create the Time Entry Work Allocation records in the local database</li>
					</ol>
					Basically, this is a full re-sync of the release data, but without discarding any local time entry changes.<br /><br />
					<b>This may take a few minutes to complete.</b>
				</div>
				<div class="modal-footer">
					<button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
					<button type="button" class="btn btn-danger" data-dismiss="modal" v-on:click="refreshEntireRelease" :disabled="!isInitialized">Refresh Everything</button>
				</div>
			</div>
		</div>
	</div>

	<!-- jira refresh confirmation modal -->
	<div class="modal fade" id="jiraSyncConfirmationModal" tabindex="-1" role="dialog" aria-labelledby="jiraSyncModalTitle" aria-hidden="true">
		<div class="modal-dialog" role="document">
			<div class="modal-content">
				<div class="modal-header">
					<h3 class="modal-title" id="jiraSyncModalTitle">Refresh Jira Stories for {{ releaseNumForConfirmationModal }}?</h3>
					<button type="button" class="close" data-dismiss="modal" aria-label="Close">
						<span aria-hidden="true">&times;</span>
					</button>
				</div>
				<div class="modal-body">
					To improve performance, Jira data is cached in a local database. If data in Jira has changed, the local cache should be manually updated BEFORE you process
					time entries for that release.<br /><br />
					Unlike the time entry data, you SHOULD NOT be making any modifications to the locally-stored work item data. This data doesn't impact
					invoicing and can therefore be modified at any time, so if a data issue is found please fix it in the source system (Jira)
					and then refresh the local cache. <br /><br />
					<b>This will also re-calculate the Work Item Time Allocations</b>, which may take a few moments if there are lots of time entries.
				</div>
				<div class="modal-footer">
					<button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
					<button type="button" class="btn btn-danger" data-dismiss="modal" v-on:click="loadWorkItemsFromJira" :disabled="!isInitialized">Refresh Jira Cache</button>
				</div>
			</div>
		</div>
	</div>

	<!-- validate time confirmation modal -->
	<div class="modal fade" id="validateReleaseConfirmationModal" tabindex="-1" role="dialog" aria-labelledby="validateReleaseModalTitle" aria-hidden="true">
		<div class="modal-dialog" role="document">
			<div class="modal-content">
				<div class="modal-header">
					<h3 class="modal-title" id="validateReleaseModalTitle">Validate Time Entries for {{ releaseNumForConfirmationModal }}?</h3>
					<button type="button" class="close" data-dismiss="modal" aria-label="Close">
						<span aria-hidden="true">&times;</span>
					</button>
				</div>
				<div class="modal-body">
					The validation check may take a few seconds.<br/><br/>
					If errors are found in the Jira data, please correct those errors directly in Jira and then refresh the Jira cache.<br/><br/>
					If errors are found in Mavenlink data that has already been submitted, please correct those errors locally.
				</div>
				<div class="modal-footer">
					<button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
					<button type="button" class="btn btn-danger" data-dismiss="modal" v-on:click="validateRelease" :disabled="!isInitialized">Validate Release</button>
				</div>
			</div>
		</div>
	</div>
</div>

<!-- modal for creating a new release -->
<div class="modal fade" id="NewReleaseModal" tabindex="-1" role="dialog">
	<div class="modal-dialog" role="document">
		<div class="modal-content">
			<div class="modal-header">
				<h5 class="modal-title">New Release</h5>
				<button type="button" class="close" data-dismiss="modal" aria-label="Close">
					<span aria-hidden="true">&times;</span>
				</button>
			</div>
			<div class="modal-body">
				<p><b>Not implemented yet</b></p>
				<p>To add a release, add it directly to the database.</p>
			</div>
			<div class="modal-footer">
				<button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
			</div>
		</div>
	</div>
</div>

<script>
	var vueApp = new Vue({
		el: '#app',

		data: {
			isInitialized: false,

			// an array of ReleaseSummary objects, with additional props:
			//	.loadingMessage = if not empty, then it indicates the release is being refreshed. The message is displayed over the row.
			releases: [],

			// HACK: used to track which release a confirmation was triggered for, so that we can pass that value into the event handler
			// on the submit button that submits the confirmation modal. This seems hacky; is there a better way?
			releaseNumForConfirmationModal: null,

			// validation messages displayed in a modal
			messageModalContents: [],
		},

		mounted() {
			this.refreshReleaseGrid();
		},

		methods: {

			// returns the release from the local view model with the specified id
			getRelease: function (releaseNum) {
				var matches = jQuery.grep(this.$data.releases, function (r) {
					return r.releaseNumber === releaseNum;
				});

				return (matches.length === 1)
					? matches[0]
					: null;
			},

			// Synchronizes the local work item cache (for work items associated with this release) with the Jira API
			loadWorkItemsFromJira: function () {
				var app = this;

				var releaseNum = app.releaseNumForConfirmationModal;
				var release = app.getRelease(releaseNum);

				release.loadingMessage = 'refreshing local Jira work item cache';

				axios
					.post('/api/WorkItems/RefreshJiraCacheForRelease?releaseNum=' + releaseNum)
					.then(response => {
						if (response.data.messages.length > 0) {
							alert("messages found, but this page doesn't know how to show them yet");
						}

						release.loadingMessage = 'updating work item time allocation';
						return axios.post('/api/TimeEntries/RefreshWorkItemTimeAllocation?releaseNum=' + releaseNum);
					})
					.then(response => {
						release.loadingMessage = 'refreshing';
						app.refreshReleaseGrid();
					});
			},

			// Re-syncs the Jira stories, Mavenlink time entries, and time allocation records for a single release
			refreshEntireRelease: function () {
				var app = this;

				var releaseNum = app.releaseNumForConfirmationModal;
				var release = app.getRelease(releaseNum);

				release.loadingMessage = 'refreshing local Jira work item cache';

				axios
					.post('/api/WorkItems/RefreshJiraCacheForRelease?releaseNum=' + releaseNum)
					.then(response => {
						if (response.data.messages.length > 0) {
							alert("messages found, but this page doesn't know how to show them yet");
						}

						release.loadingMessage = 're-loading time entries from Mavenlink';
						return axios.post('/api/TimeEntries/LoadTimeFromMavenlink?releaseNum=' + releaseNum);
					})
					.then(response => {
						release.loadingMessage = 'updating work item time allocation';
						return axios.post('/api/TimeEntries/RefreshWorkItemTimeAllocation?releaseNum=' + releaseNum);
					})
					.then(response => {
						release.loadingMessage = 'refreshing';
						app.refreshReleaseGrid();
					});
			},

			refreshReleaseGrid: function () {
				var app = this;

				app.isInitialized = false;

				axios
					.get("/api/Releases/List")
					.then(response => {
						for (var i = 0; i < response.data.length; i++) {
							Vue.set(response.data[i], 'loadingMessage', '');
						}
						app.releases = response.data;
						app.isInitialized = true;
					});
			},

			// Checks for validation errors. If found, displays them in a modal for inline editing.
			validateRelease: function () {
				var app = this;

				var releaseNum = app.releaseNumForConfirmationModal;
				var release = app.getRelease(releaseNum);

				release.loadingMessage = 'validating';

				axios
					.get('/api/TimeEntries/ValidateEntriesForRelease?releaseNum=' + releaseNum)
					.then(response => {

						var payload = response.data;

						var hasErrors = false;

						for (var i = 0; i < payload.length; i++) {
							var thisResult = payload[i];
							var thisTimeEntry = vm.getTimeEntry(thisResult.timeEntryId);

							if (thisTimeEntry === null) {
								console.log("Couldn't find time entry %s", thisResult.timeEntryId);
							}

							thisTimeEntry.validationErrors = thisResult.errors;
							thisTimeEntry.validationWarnings = thisResult.warnings;

							hasErrors = hasErrors || (thisResult.errors.length > 0);
						}
					});
			},
		},

		filters: {
			shortDate: function (date) {
				return moment(date).format('YYYY-MM-DD');
			},

			twoDecimalPts: function (decimalNum) {
				return parseFloat(Math.round(decimalNum * 100) / 100).toFixed(2);
			}
		}
	});
</script>


